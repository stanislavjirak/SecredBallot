var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
import { EventEmitter } from 'eventemitter3';
import { SubscribeTopic } from '@oasislabs/service';
import { ServicePollApi, SubscribePollApi, } from './api';
var PollingService = /** @class */ (function () {
    /**
     * The constructor should never be invoked directly. To access the PollingService
     * use `PollingService.instance`.
     */
    function PollingService(session, queueId, responseWindow, interval) {
        this.session = session;
        this.queueId = queueId;
        this.responseWindow = responseWindow ? responseWindow : new Window();
        this.interval = interval ? interval : 1000;
        this.responses = new EventEmitter();
        this.lastResponseTs = Date.now();
    }
    /**
     * @returns the instance of PollingService for the given url.
     */
    PollingService.instance = function (options) {
        var id = PollingService.id(options);
        if (!PollingService.SERVICES.get(id)) {
            PollingService.SERVICES.set(id, new PollingService(options.session, options.queueId, 
            // Set the end point of the window to 2**53 if the queueId exists since
            // it implies a subscription and subscriptions never auto close.
            options.queueId !== undefined ? new Window(0, Math.pow(2, 53)) : new Window(), options.interval));
        }
        return PollingService.SERVICES.get(id);
    };
    /**
     * @returns the internal identifier for the service specified by the given options.
     *          This identifier is used to track each individual PollingService object
     *          cached in PollingService.SERVICES.
     *
     *          Not only will different polling services be created for each
     *          distinct developer gateway url, but also for each unique message
     *          queue handled by the developer gateway.
     *
     *          For the ServicePollApi, there is a single queue for all responses
     *          related to service apis. For subscriptions, however, there is a
     *          unique queue for each individudual subscription--hence the use of
     *          queueId to form the id.
     */
    PollingService.id = function (options) {
        return options.queueId !== undefined
            ? options.url + "/" + SubscribePollApi + "/" + options.queueId
            : options.url + "/" + ServicePollApi;
    };
    /**
     * response is the main api provided by PollingService.
     *
     * @returns a promise that resolves to the dev server's response for the given
     *          requestId.
     * @param   requestId is the id returned when making the initial request to the
     *          gateway.
     */
    PollingService.prototype.response = function (requestId) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                return [2 /*return*/, new Promise(function (resolve) {
                        var cached = _this.responseWindow.item(requestId);
                        if (cached) {
                            return resolve(cached);
                        }
                        _this.responseWindow.extend(requestId);
                        _this.responses.once("" + requestId, function (response) {
                            resolve(response);
                        });
                        if (!_this.polling) {
                            _this.start();
                        }
                    })];
            });
        });
    };
    /**
     * Initiates the polling service to begin polling for responses.
     */
    PollingService.prototype.start = function () {
        this.polling = setInterval(this.pollOnce.bind(this), this.interval);
    };
    PollingService.prototype.pollOnce = function () {
        return __awaiter(this, void 0, void 0, function () {
            var api, responses;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        api = this.api();
                        return [4 /*yield*/, this.session.request(api.method, api.url, {
                                offset: this.responseWindow.start,
                                discardPrevious: true,
                                id: this.queueId,
                            })];
                    case 1:
                        responses = _a.sent();
                        // No responses so exit. Can remove once this is resolved:
                        // https://github.com/oasislabs/developer-gateway/issues/23
                        if (!responses.events) {
                            if (Date.now() - this.lastResponseTs >= PollingService.IDLE_TIMELAPSE) {
                                this.stop();
                            }
                            return [2 /*return*/];
                        }
                        this.lastResponseTs = Date.now();
                        responses.events.forEach(function (r) {
                            _this.responses.emit(_this.topic(r), r);
                            _this.responseWindow.slide(r.id, r);
                            if (_this.responseWindow.isClosed()) {
                                _this.stop();
                            }
                        });
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Force stops the polling service.
     */
    PollingService.prototype.stop = function () {
        clearInterval(this.polling);
        this.polling = undefined;
    };
    PollingService.prototype.subscribe = function (requestId, callback) {
        if (this.polling) {
            throw new Error('cannot make a new subscription when already polling');
        }
        this.responses.addListener(SubscribeTopic, callback);
        this.start();
    };
    /**
     * @returns the DeveloperGatewayApi currently being polled.
     */
    PollingService.prototype.api = function () {
        return this.queueId !== undefined ? SubscribePollApi : ServicePollApi;
    };
    /**
     * @returns the topic to publish the given response to.
     */
    PollingService.prototype.topic = function (response) {
        return this.queueId !== undefined ? SubscribeTopic : "" + response.id;
    };
    /**
     * Instances of PollingService, one for each unique developer gateway url, used.
     */
    PollingService.SERVICES = new Map();
    /**
     * Amount of time that can pass before being considered idle.
     */
    PollingService.IDLE_TIMELAPSE = 1000 * 60;
    return PollingService;
}());
export default PollingService;
var Window = /** @class */ (function () {
    function Window(start, end) {
        /**
         * Collected elements in this window. Maps element id to element.
         */
        this.collected = new Map();
        this.start = start !== undefined ? start : -1;
        this.end = end !== undefined ? end : -1;
    }
    /**
     * Extend the window to wait for the given element id.
     */
    Window.prototype.extend = function (id) {
        // First time extending so set the start as well.
        if (this.isClosed()) {
            this.start = id;
            this.end = id + 1;
        }
        // Push out the edge of the window.
        else if (id >= this.end) {
            this.end = id + 1;
        }
    };
    /**
     * Slide accrues the given item into the cache and advances the window start
     * if it's the next contiguous item.
     */
    Window.prototype.slide = function (id, item) {
        this.collected.set(id, item);
        if (id === this.start) {
            var start = this.start;
            for (var k = start; k < this.end; k += 1) {
                if (this.collected.get(k)) {
                    this.start += 1;
                }
                else {
                    break;
                }
            }
        }
        if (this.start > this.end) {
            this.end = this.start + 1;
        }
    };
    /**
     * @returns true when all elements in this window have been collected.
     */
    Window.prototype.isClosed = function () {
        return this.start === this.end;
    };
    /**
     * @returns the item at the given window slot id.
     */
    Window.prototype.item = function (id) {
        return this.collected.get(id);
    };
    return Window;
}());
//# sourceMappingURL=polling.js.map