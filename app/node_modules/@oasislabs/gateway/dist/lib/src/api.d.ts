/**
 * The api module defines the types used for the v0/api of the developer
 * gateway.
 */
/**
 * DeveloperGatewayApi represents the path for a URI for the developer gateway.
 */
export declare type DeveloperGatewayApi = {
    url: string;
    method: string;
};
/**
 * Deploys a services.
 */
export declare const DeployApi: DeveloperGatewayApi;
/**
 * Invokes an rpc on a service.
 */
export declare const RpcApi: DeveloperGatewayApi;
/**
 * Retrieives the public key for a service.
 */
export declare const PublicKeyApi: DeveloperGatewayApi;
/**
 * Retrieves the code for an address.
 */
export declare const GetCodeApi: DeveloperGatewayApi;
/**
 * Polls for an event on a service.
 */
export declare const ServicePollApi: DeveloperGatewayApi;
/**
 * Subscribes to a gateway topic.
 */
export declare const SubscribeApi: DeveloperGatewayApi;
/**
 * Polls for an event on a subscription.
 */
export declare const SubscribePollApi: DeveloperGatewayApi;
/**
 * Retrieves the health status of the gateway.
 */
export declare const HealthApi: DeveloperGatewayApi;
/**
 * Unsubscribes from a `SubscribeApi` subscription.
 */
export declare const UnsubscribeApi: DeveloperGatewayApi;
/**
 *  Event is an interface for types that can be fetched by polling on a service.
 */
export declare type Event = ExecuteServiceEvent | PublicKeyEvent | DeployEvent | ErrorEvent;
/**
 * ExecuteServiceResponse is an asynchronous response that will be obtained
 * using the polling mechanisms.
 */
export declare type ExecuteServiceResponse = {
    id: number;
};
/**
 * PollServiceResponse returns a list of asynchronous responses the
 * client requested
 */
export declare type PollServiceResponse = {
    offset: number;
    events: Event[] | null;
};
/**
 * ExecuteServiceEvent is the event that can be polled by the user
 * as a result to a ServiceExecutionRequest.
 */
export declare type ExecuteServiceEvent = {
    id: number;
    address: string;
    output: string;
};
export declare type PublicKeyEvent = {
    id: number;
    publicKey: string;
    timestamp: number;
    signature: string;
};
export declare type DeployEvent = {
    id: number;
    address: string;
};
/**
 * ErrorEvent is the event that can be polled by the user as a result
 * to a request that failed.
 */
export declare type ErrorEvent = {
    id: number;
    cause: Error;
};
export declare type Error = {
    errorCode: number;
    description: string;
};
