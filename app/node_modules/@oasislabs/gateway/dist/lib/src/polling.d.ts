import { Http } from './http';
export default class PollingService {
    private session;
    private queueId?;
    /**
     * Instances of PollingService, one for each unique developer gateway url, used.
     */
    private static SERVICES;
    /**
     * responses emits events when new responses are retrieved from the developer
     * gateway. Event names are the request ids given by the developer gateway.
     * Values are the responses themselves.
     */
    private responses;
    /**
     * responseWindow is the datastructure tracking the request id's for which we have
     * not received responses.
     */
    private responseWindow;
    /**
     * interval is the polling interval in milliseconds.
     */
    private interval;
    /**
     * The timeout object actively being polled. If undefined, then polling is off.
     */
    private polling?;
    /**
     * Millisecond timestamp representing the last time we received an event response
     * from the gateway. When IDLE_TIMELAPSE milliseconds have passed, the
     * PollingService is considered idle and stops.
     */
    private lastResponseTs;
    /**
     * Amount of time that can pass before being considered idle.
     */
    private static IDLE_TIMELAPSE;
    /**
     * The constructor should never be invoked directly. To access the PollingService
     * use `PollingService.instance`.
     */
    private constructor();
    /**
     * @returns the instance of PollingService for the given url.
     */
    static instance(options: PollingServiceOptions): PollingService;
    /**
     * @returns the internal identifier for the service specified by the given options.
     *          This identifier is used to track each individual PollingService object
     *          cached in PollingService.SERVICES.
     *
     *          Not only will different polling services be created for each
     *          distinct developer gateway url, but also for each unique message
     *          queue handled by the developer gateway.
     *
     *          For the ServicePollApi, there is a single queue for all responses
     *          related to service apis. For subscriptions, however, there is a
     *          unique queue for each individudual subscription--hence the use of
     *          queueId to form the id.
     */
    private static id;
    /**
     * response is the main api provided by PollingService.
     *
     * @returns a promise that resolves to the dev server's response for the given
     *          requestId.
     * @param   requestId is the id returned when making the initial request to the
     *          gateway.
     */
    response(requestId: number): Promise<any>;
    /**
     * Initiates the polling service to begin polling for responses.
     */
    start(): void;
    private pollOnce;
    /**
     * Force stops the polling service.
     */
    stop(): void;
    subscribe(requestId: number, callback: Function): void;
    /**
     * @returns the DeveloperGatewayApi currently being polled.
     */
    private api;
    /**
     * @returns the topic to publish the given response to.
     */
    private topic;
}
export declare type PollingServiceOptions = {
    url: string;
    session: Http;
    queueId?: number;
    interval?: number;
};
