import { OasisGateway, RpcRequest, RpcResponse, SubscribeRequest, UnsubscribeRequest, DeployRequest, DeployResponse, PublicKeyRequest, PublicKeyResponse, GetCodeRequest, GetCodeResponse } from '@oasislabs/service';
import PollingService from './polling';
import { SubscribeApi, ServicePollApi, SubscribePollApi, GetCodeApi } from './api';
import { HttpHeaders, Http } from './http';
export { Http, HttpGateway, ServicePollApi, SubscribeApi, SubscribePollApi, GetCodeApi, PollingService, };
export default class Gateway implements OasisGateway {
    private inner;
    connectionState: any;
    constructor(url: string, apiToken: string, headers: HttpHeaders);
    deploy(request: DeployRequest): Promise<DeployResponse>;
    rpc(request: RpcRequest): Promise<RpcResponse>;
    subscribe(request: SubscribeRequest): any;
    unsubscribe(request: UnsubscribeRequest): void;
    publicKey(request: PublicKeyRequest): Promise<PublicKeyResponse>;
    getCode(request: GetCodeRequest): Promise<GetCodeResponse>;
    disconnect(): void;
    hasSigner(): boolean;
}
declare class HttpGateway implements OasisGateway {
    private url;
    private apiToken;
    private headers;
    /**
     * http makes network requests to the gateway.
     */
    private session;
    /**
     * polling collects all non-subscribe responses from the developer gateway.
     */
    private polling;
    /**
     * Maps event name to the polling service queueId. One for each subscription.
     */
    private subscriptions;
    private connectionStateDummy;
    constructor(url: string, apiToken: string, headers: HttpHeaders);
    /**
     * Sanity check that the gateway is constructed with the correct url.
     */
    private assertGatewayIsResponsive;
    deploy(request: DeployRequest): Promise<DeployResponse>;
    rpc(request: RpcRequest): Promise<RpcResponse>;
    subscribe(request: SubscribeRequest): any;
    unsubscribe(request: UnsubscribeRequest): void;
    publicKey(request: PublicKeyRequest): Promise<PublicKeyResponse>;
    /**
     * Performs the asynchronous developer gateway request by posting a request
     * and then polling for the response.
     */
    private postAndPoll;
    getCode(request: GetCodeRequest): Promise<GetCodeResponse>;
    disconnect(): void;
    connectionState(): any;
    hasSigner(): boolean;
}
