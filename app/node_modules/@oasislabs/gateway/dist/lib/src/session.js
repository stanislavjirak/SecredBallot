var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
import { AxiosClient } from './http';
import * as _uuid from 'uuid';
var uuid = undefined;
var URL = undefined;
// Browser.
/* tslint:disable */
if (typeof window !== 'undefined') {
    // @ts-ignore
    uuid = _uuid.default;
    URL = window.URL;
}
// Node.
else {
    uuid = require('uuid');
    URL = require('url').URL;
}
var HttpSession = /** @class */ (function () {
    function HttpSession(url, apiToken, headers, client) {
        this.url = url;
        this.apiToken = apiToken;
        this.sessionKey = uuid.v4();
        this.headers = headers;
        this.headers =
            this.headers && this.headers.headers
                ? this.headers
                : { headers: new Map() };
        this.client = client ? client : new AxiosClient();
    }
    HttpSession.prototype.request = function (method, api, body) {
        return __awaiter(this, void 0, void 0, function () {
            var url, headers, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        url = new URL(api, this.url).href;
                        headers = { headers: new Map() };
                        headers.headers.set('X-OASIS-INSECURE-AUTH', '1');
                        headers.headers.set('X-OASIS-LOGIN-TOKEN', this.apiToken);
                        headers.headers.set('X-OASIS-SESSION-KEY', this.sessionKey);
                        headers.headers.set('Content-type', 'application/json');
                        this.headers.headers.forEach(function (value, key) {
                            return headers.headers.set(key, value);
                        });
                        return [4 /*yield*/, this.client.request(method, url, body, headers)];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, response.data];
                }
            });
        });
    };
    return HttpSession;
}());
export { HttpSession };
//# sourceMappingURL=session.js.map