var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
import { EventEmitter } from 'eventemitter3';
import { bytes } from '@oasislabs/common';
import PollingService from './polling';
import { DeployApi, RpcApi, PublicKeyApi, SubscribeApi, ServicePollApi, SubscribePollApi, GetCodeApi, HealthApi, UnsubscribeApi, } from './api';
import { HttpSession } from './session';
// Re-export.
export { HttpGateway, ServicePollApi, SubscribeApi, SubscribePollApi, GetCodeApi, PollingService, };
var Gateway = /** @class */ (function () {
    function Gateway(url, apiToken, headers) {
        this.connectionState = new EventEmitter();
        // TODO: WebSocket gateway and extract protocol from url.
        this.inner = new HttpGateway(url, apiToken, headers);
    }
    Gateway.prototype.deploy = function (request) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.inner.deploy(request)];
            });
        });
    };
    Gateway.prototype.rpc = function (request) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.inner.rpc(request)];
            });
        });
    };
    Gateway.prototype.subscribe = function (request) {
        return this.inner.subscribe(request);
    };
    Gateway.prototype.unsubscribe = function (request) {
        return this.inner.unsubscribe(request);
    };
    Gateway.prototype.publicKey = function (request) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.inner.publicKey(request)];
            });
        });
    };
    Gateway.prototype.getCode = function (request) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.inner.getCode(request)];
            });
        });
    };
    Gateway.prototype.disconnect = function () {
        this.inner.disconnect();
    };
    Gateway.prototype.hasSigner = function () {
        return this.inner.hasSigner();
    };
    return Gateway;
}());
export default Gateway;
var HttpGateway = /** @class */ (function () {
    function HttpGateway(url, apiToken, headers) {
        this.url = url;
        this.apiToken = apiToken;
        this.headers = headers;
        this.connectionStateDummy = new EventEmitter();
        this.session = new HttpSession(url, apiToken, headers);
        this.polling = PollingService.instance({
            url: url,
            session: this.session,
        });
        this.subscriptions = new Map();
    }
    /**
     * Sanity check that the gateway is constructed with the correct url.
     */
    HttpGateway.prototype.assertGatewayIsResponsive = function (url) {
        var _this = this;
        return new Promise(function (resolve, reject) { return __awaiter(_this, void 0, void 0, function () {
            var timeout, e_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        timeout = setTimeout(function () {
                            reject(new Error("Couldn't connect to gateway " + url));
                        }, 3000);
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, this.session.request(HealthApi.method, HealthApi.url, {})];
                    case 2:
                        _a.sent();
                        return [3 /*break*/, 4];
                    case 3:
                        e_1 = _a.sent();
                        if (e_1.message !== 'Request failed with status code 404') {
                            reject(e_1);
                        }
                        else {
                            clearTimeout(timeout);
                            resolve();
                        }
                        return [3 /*break*/, 4];
                    case 4: return [2 /*return*/];
                }
            });
        }); });
    };
    HttpGateway.prototype.deploy = function (request) {
        return __awaiter(this, void 0, void 0, function () {
            var e, event, address;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.postAndPoll(DeployApi, {
                            data: bytes.toHex(request.data),
                        })];
                    case 1:
                        e = _a.sent();
                        event = e;
                        address = bytes.parseHex(event.address);
                        return [2 /*return*/, { address: address }];
                }
            });
        });
    };
    HttpGateway.prototype.rpc = function (request) {
        return __awaiter(this, void 0, void 0, function () {
            var event;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (request.options) {
                            throw new Error('transaction options are not allowed by the developer gateway');
                        }
                        return [4 /*yield*/, this.postAndPoll(RpcApi, {
                                data: bytes.toHex(request.data),
                                address: bytes.toHex(request.address),
                            })];
                    case 1:
                        event = _a.sent();
                        // todo: the developer gateway should have an error if the transaction
                        //       reverted.
                        return [2 /*return*/, {
                                output: event.output,
                            }];
                }
            });
        });
    };
    // TODO: this should be typed to return an event emitter once we address
    //       https://github.com/oasislabs/oasis-client/issues/25
    HttpGateway.prototype.subscribe = function (request) {
        var _this = this;
        var events = new EventEmitter();
        this.session
            .request(SubscribeApi.method, SubscribeApi.url, {
            events: ['logs'],
            filter: urlEncodeFilter(request.filter),
        })
            .then(function (response) {
            if (response.id === undefined || response.id === null) {
                throw new Error("subscription failed: " + response);
            }
            // Store the event -> queueId mapping so that we can unsubscribe later.
            _this.subscriptions.set(request.event, response.id);
            PollingService.instance({
                url: _this.url,
                session: _this.session,
                queueId: response.id,
            }).subscribe(response.id, function (event) {
                events.emit(request.event, event);
            });
        })
            .catch(function (err) {
            events.emit('error', err);
        });
        return events;
    };
    HttpGateway.prototype.unsubscribe = function (request) {
        var queueId = this.subscriptions.get(request.event);
        if (queueId === undefined) {
            throw new Error("no subscriptions exist for " + JSON.stringify(request));
        }
        // Cleanup the client's subscription.
        PollingService.instance({
            url: this.url,
            session: this.session,
            queueId: queueId,
        }).stop();
        this.subscriptions.delete(request.event);
        // Cleanup the gateway's subscription.
        this.session
            .request(UnsubscribeApi.method, UnsubscribeApi.url, {
            id: queueId,
        })
            .catch(function (err) {
            console.error("Error unsubscribing from gateway: " + err);
        });
    };
    HttpGateway.prototype.publicKey = function (request) {
        return __awaiter(this, void 0, void 0, function () {
            var response, event, publicKey;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.session.request(PublicKeyApi.method, PublicKeyApi.url, {
                            address: bytes.toHex(request.address),
                        })];
                    case 1:
                        response = _a.sent();
                        event = response;
                        publicKey = event.publicKey
                            ? bytes.parseHex(event.publicKey)
                            : undefined;
                        return [2 /*return*/, { publicKey: publicKey }];
                }
            });
        });
    };
    /**
     * Performs the asynchronous developer gateway request by posting a request
     * and then polling for the response.
     */
    HttpGateway.prototype.postAndPoll = function (api, body) {
        return __awaiter(this, void 0, void 0, function () {
            var response, event;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.session.request(api.method, api.url, body)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, this.polling.response(response.id)];
                    case 2:
                        event = _a.sent();
                        if (event.cause) {
                            throw new Error("poll error: " + JSON.stringify(event));
                        }
                        return [2 /*return*/, event];
                }
            });
        });
    };
    HttpGateway.prototype.getCode = function (request) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.session.request(GetCodeApi.method, GetCodeApi.url, {
                            address: bytes.toHex(request.address),
                        })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, {
                                code: bytes.parseHex(response.code),
                            }];
                }
            });
        });
    };
    HttpGateway.prototype.disconnect = function () {
        // no-op
    };
    // todo: change any to EventEmitter.
    //       https://github.com/oasislabs/oasis-client/issues/25
    HttpGateway.prototype.connectionState = function () {
        // `deploy` et al. don't hide connection problems, so no need to emit these events.
        return this.connectionStateDummy;
    };
    HttpGateway.prototype.hasSigner = function () {
        return false;
    };
    return HttpGateway;
}());
function urlEncodeFilter(filter) {
    return ("address=" + bytes.toHex(filter.address) +
        '&' +
        filter.topics.map(function (t) { return 'topic=' + t; }).join('&'));
}
//# sourceMappingURL=index.js.map