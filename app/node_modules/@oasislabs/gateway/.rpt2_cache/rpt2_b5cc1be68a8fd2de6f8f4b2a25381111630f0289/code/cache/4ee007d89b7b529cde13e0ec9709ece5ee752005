{"map":"{\"version\":3,\"file\":\"polling.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../src/polling.ts\"],\"names\":[],\"mappings\":\"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\"}","code":"import { __awaiter, __generator } from \"tslib\";\r\nimport { EventEmitter } from 'eventemitter3';\r\nimport { SubscribeTopic } from '@oasislabs/service';\r\nimport { ServicePollApi, SubscribePollApi, } from './api';\r\nvar PollingService = /** @class */ (function () {\r\n    /**\r\n     * The constructor should never be invoked directly. To access the PollingService\r\n     * use `PollingService.instance`.\r\n     */\r\n    function PollingService(session, queueId, responseWindow, interval) {\r\n        this.session = session;\r\n        this.queueId = queueId;\r\n        this.responseWindow = responseWindow ? responseWindow : new Window();\r\n        this.interval = interval ? interval : 1000;\r\n        this.responses = new EventEmitter();\r\n        this.lastResponseTs = Date.now();\r\n    }\r\n    /**\r\n     * @returns the instance of PollingService for the given url.\r\n     */\r\n    PollingService.instance = function (options) {\r\n        var id = PollingService.id(options);\r\n        if (!PollingService.SERVICES.get(id)) {\r\n            PollingService.SERVICES.set(id, new PollingService(options.session, options.queueId, \r\n            // Set the end point of the window to 2**53 if the queueId exists since\r\n            // it implies a subscription and subscriptions never auto close.\r\n            options.queueId !== undefined ? new Window(0, Math.pow(2, 53)) : new Window(), options.interval));\r\n        }\r\n        return PollingService.SERVICES.get(id);\r\n    };\r\n    /**\r\n     * @returns the internal identifier for the service specified by the given options.\r\n     *          This identifier is used to track each individual PollingService object\r\n     *          cached in PollingService.SERVICES.\r\n     *\r\n     *          Not only will different polling services be created for each\r\n     *          distinct developer gateway url, but also for each unique message\r\n     *          queue handled by the developer gateway.\r\n     *\r\n     *          For the ServicePollApi, there is a single queue for all responses\r\n     *          related to service apis. For subscriptions, however, there is a\r\n     *          unique queue for each individudual subscription--hence the use of\r\n     *          queueId to form the id.\r\n     */\r\n    PollingService.id = function (options) {\r\n        return options.queueId !== undefined\r\n            ? options.url + \"/\" + SubscribePollApi + \"/\" + options.queueId\r\n            : options.url + \"/\" + ServicePollApi;\r\n    };\r\n    /**\r\n     * response is the main api provided by PollingService.\r\n     *\r\n     * @returns a promise that resolves to the dev server's response for the given\r\n     *          requestId.\r\n     * @param   requestId is the id returned when making the initial request to the\r\n     *          gateway.\r\n     */\r\n    PollingService.prototype.response = function (requestId) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var _this = this;\r\n            return __generator(this, function (_a) {\r\n                return [2 /*return*/, new Promise(function (resolve) {\r\n                        var cached = _this.responseWindow.item(requestId);\r\n                        if (cached) {\r\n                            return resolve(cached);\r\n                        }\r\n                        _this.responseWindow.extend(requestId);\r\n                        _this.responses.once(\"\" + requestId, function (response) {\r\n                            resolve(response);\r\n                        });\r\n                        if (!_this.polling) {\r\n                            _this.start();\r\n                        }\r\n                    })];\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Initiates the polling service to begin polling for responses.\r\n     */\r\n    PollingService.prototype.start = function () {\r\n        this.polling = setInterval(this.pollOnce.bind(this), this.interval);\r\n    };\r\n    PollingService.prototype.pollOnce = function () {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var api, responses;\r\n            var _this = this;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        api = this.api();\r\n                        return [4 /*yield*/, this.session.request(api.method, api.url, {\r\n                                offset: this.responseWindow.start,\r\n                                discardPrevious: true,\r\n                                id: this.queueId,\r\n                            })];\r\n                    case 1:\r\n                        responses = _a.sent();\r\n                        // No responses so exit. Can remove once this is resolved:\r\n                        // https://github.com/oasislabs/developer-gateway/issues/23\r\n                        if (!responses.events) {\r\n                            if (Date.now() - this.lastResponseTs >= PollingService.IDLE_TIMELAPSE) {\r\n                                this.stop();\r\n                            }\r\n                            return [2 /*return*/];\r\n                        }\r\n                        this.lastResponseTs = Date.now();\r\n                        responses.events.forEach(function (r) {\r\n                            _this.responses.emit(_this.topic(r), r);\r\n                            _this.responseWindow.slide(r.id, r);\r\n                            if (_this.responseWindow.isClosed()) {\r\n                                _this.stop();\r\n                            }\r\n                        });\r\n                        return [2 /*return*/];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Force stops the polling service.\r\n     */\r\n    PollingService.prototype.stop = function () {\r\n        clearInterval(this.polling);\r\n        this.polling = undefined;\r\n    };\r\n    PollingService.prototype.subscribe = function (requestId, callback) {\r\n        if (this.polling) {\r\n            throw new Error('cannot make a new subscription when already polling');\r\n        }\r\n        this.responses.addListener(SubscribeTopic, callback);\r\n        this.start();\r\n    };\r\n    /**\r\n     * @returns the DeveloperGatewayApi currently being polled.\r\n     */\r\n    PollingService.prototype.api = function () {\r\n        return this.queueId !== undefined ? SubscribePollApi : ServicePollApi;\r\n    };\r\n    /**\r\n     * @returns the topic to publish the given response to.\r\n     */\r\n    PollingService.prototype.topic = function (response) {\r\n        return this.queueId !== undefined ? SubscribeTopic : \"\" + response.id;\r\n    };\r\n    /**\r\n     * Instances of PollingService, one for each unique developer gateway url, used.\r\n     */\r\n    PollingService.SERVICES = new Map();\r\n    /**\r\n     * Amount of time that can pass before being considered idle.\r\n     */\r\n    PollingService.IDLE_TIMELAPSE = 1000 * 60;\r\n    return PollingService;\r\n}());\r\nexport default PollingService;\r\nvar Window = /** @class */ (function () {\r\n    function Window(start, end) {\r\n        /**\r\n         * Collected elements in this window. Maps element id to element.\r\n         */\r\n        this.collected = new Map();\r\n        this.start = start !== undefined ? start : -1;\r\n        this.end = end !== undefined ? end : -1;\r\n    }\r\n    /**\r\n     * Extend the window to wait for the given element id.\r\n     */\r\n    Window.prototype.extend = function (id) {\r\n        // First time extending so set the start as well.\r\n        if (this.isClosed()) {\r\n            this.start = id;\r\n            this.end = id + 1;\r\n        }\r\n        // Push out the edge of the window.\r\n        else if (id >= this.end) {\r\n            this.end = id + 1;\r\n        }\r\n    };\r\n    /**\r\n     * Slide accrues the given item into the cache and advances the window start\r\n     * if it's the next contiguous item.\r\n     */\r\n    Window.prototype.slide = function (id, item) {\r\n        this.collected.set(id, item);\r\n        if (id === this.start) {\r\n            var start = this.start;\r\n            for (var k = start; k < this.end; k += 1) {\r\n                if (this.collected.get(k)) {\r\n                    this.start += 1;\r\n                }\r\n                else {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        if (this.start > this.end) {\r\n            this.end = this.start + 1;\r\n        }\r\n    };\r\n    /**\r\n     * @returns true when all elements in this window have been collected.\r\n     */\r\n    Window.prototype.isClosed = function () {\r\n        return this.start === this.end;\r\n    };\r\n    /**\r\n     * @returns the item at the given window slot id.\r\n     */\r\n    Window.prototype.item = function (id) {\r\n        return this.collected.get(id);\r\n    };\r\n    return Window;\r\n}());\r\n//# sourceMappingURL=polling.js.map","dts":{"name":"/Users/armaniferrante/Documents/code/src/github.com/oasislabs/tttt/oasis.js/packages/gateway/dist/lib/src/polling.d.ts","writeByteOrderMark":false,"text":"import { Http } from './http';\r\nexport default class PollingService {\r\n    private session;\r\n    private queueId?;\r\n    /**\r\n     * Instances of PollingService, one for each unique developer gateway url, used.\r\n     */\r\n    private static SERVICES;\r\n    /**\r\n     * responses emits events when new responses are retrieved from the developer\r\n     * gateway. Event names are the request ids given by the developer gateway.\r\n     * Values are the responses themselves.\r\n     */\r\n    private responses;\r\n    /**\r\n     * responseWindow is the datastructure tracking the request id's for which we have\r\n     * not received responses.\r\n     */\r\n    private responseWindow;\r\n    /**\r\n     * interval is the polling interval in milliseconds.\r\n     */\r\n    private interval;\r\n    /**\r\n     * The timeout object actively being polled. If undefined, then polling is off.\r\n     */\r\n    private polling?;\r\n    /**\r\n     * Millisecond timestamp representing the last time we received an event response\r\n     * from the gateway. When IDLE_TIMELAPSE milliseconds have passed, the\r\n     * PollingService is considered idle and stops.\r\n     */\r\n    private lastResponseTs;\r\n    /**\r\n     * Amount of time that can pass before being considered idle.\r\n     */\r\n    private static IDLE_TIMELAPSE;\r\n    /**\r\n     * The constructor should never be invoked directly. To access the PollingService\r\n     * use `PollingService.instance`.\r\n     */\r\n    private constructor();\r\n    /**\r\n     * @returns the instance of PollingService for the given url.\r\n     */\r\n    static instance(options: PollingServiceOptions): PollingService;\r\n    /**\r\n     * @returns the internal identifier for the service specified by the given options.\r\n     *          This identifier is used to track each individual PollingService object\r\n     *          cached in PollingService.SERVICES.\r\n     *\r\n     *          Not only will different polling services be created for each\r\n     *          distinct developer gateway url, but also for each unique message\r\n     *          queue handled by the developer gateway.\r\n     *\r\n     *          For the ServicePollApi, there is a single queue for all responses\r\n     *          related to service apis. For subscriptions, however, there is a\r\n     *          unique queue for each individudual subscription--hence the use of\r\n     *          queueId to form the id.\r\n     */\r\n    private static id;\r\n    /**\r\n     * response is the main api provided by PollingService.\r\n     *\r\n     * @returns a promise that resolves to the dev server's response for the given\r\n     *          requestId.\r\n     * @param   requestId is the id returned when making the initial request to the\r\n     *          gateway.\r\n     */\r\n    response(requestId: number): Promise<any>;\r\n    /**\r\n     * Initiates the polling service to begin polling for responses.\r\n     */\r\n    start(): void;\r\n    private pollOnce;\r\n    /**\r\n     * Force stops the polling service.\r\n     */\r\n    stop(): void;\r\n    subscribe(requestId: number, callback: Function): void;\r\n    /**\r\n     * @returns the DeveloperGatewayApi currently being polled.\r\n     */\r\n    private api;\r\n    /**\r\n     * @returns the topic to publish the given response to.\r\n     */\r\n    private topic;\r\n}\r\nexport declare type PollingServiceOptions = {\r\n    url: string;\r\n    session: Http;\r\n    queueId?: number;\r\n    interval?: number;\r\n};\r\n"}}
