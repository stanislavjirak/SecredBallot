{"map":"{\"version\":3,\"file\":\"index.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../src/index.ts\"],\"names\":[],\"mappings\":\"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\"}","code":"import { __awaiter, __generator } from \"tslib\";\r\nimport { EventEmitter } from 'eventemitter3';\r\nimport { bytes } from '@oasislabs/common';\r\nimport PollingService from './polling';\r\nimport { DeployApi, RpcApi, PublicKeyApi, SubscribeApi, ServicePollApi, SubscribePollApi, GetCodeApi, HealthApi, UnsubscribeApi, } from './api';\r\nimport { HttpSession } from './session';\r\n// Re-export.\r\nexport { HttpGateway, ServicePollApi, SubscribeApi, SubscribePollApi, GetCodeApi, PollingService, };\r\nvar Gateway = /** @class */ (function () {\r\n    function Gateway(url, apiToken, headers) {\r\n        this.connectionState = new EventEmitter();\r\n        // TODO: WebSocket gateway and extract protocol from url.\r\n        this.inner = new HttpGateway(url, apiToken, headers);\r\n    }\r\n    Gateway.prototype.deploy = function (request) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            return __generator(this, function (_a) {\r\n                return [2 /*return*/, this.inner.deploy(request)];\r\n            });\r\n        });\r\n    };\r\n    Gateway.prototype.rpc = function (request) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            return __generator(this, function (_a) {\r\n                return [2 /*return*/, this.inner.rpc(request)];\r\n            });\r\n        });\r\n    };\r\n    Gateway.prototype.subscribe = function (request) {\r\n        return this.inner.subscribe(request);\r\n    };\r\n    Gateway.prototype.unsubscribe = function (request) {\r\n        return this.inner.unsubscribe(request);\r\n    };\r\n    Gateway.prototype.publicKey = function (request) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            return __generator(this, function (_a) {\r\n                return [2 /*return*/, this.inner.publicKey(request)];\r\n            });\r\n        });\r\n    };\r\n    Gateway.prototype.getCode = function (request) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            return __generator(this, function (_a) {\r\n                return [2 /*return*/, this.inner.getCode(request)];\r\n            });\r\n        });\r\n    };\r\n    Gateway.prototype.disconnect = function () {\r\n        this.inner.disconnect();\r\n    };\r\n    Gateway.prototype.hasSigner = function () {\r\n        return this.inner.hasSigner();\r\n    };\r\n    return Gateway;\r\n}());\r\nexport default Gateway;\r\nvar HttpGateway = /** @class */ (function () {\r\n    function HttpGateway(url, apiToken, headers) {\r\n        this.url = url;\r\n        this.apiToken = apiToken;\r\n        this.headers = headers;\r\n        this.connectionStateDummy = new EventEmitter();\r\n        this.session = new HttpSession(url, apiToken, headers);\r\n        this.polling = PollingService.instance({\r\n            url: url,\r\n            session: this.session,\r\n        });\r\n        this.subscriptions = new Map();\r\n    }\r\n    /**\r\n     * Sanity check that the gateway is constructed with the correct url.\r\n     */\r\n    HttpGateway.prototype.assertGatewayIsResponsive = function (url) {\r\n        var _this = this;\r\n        return new Promise(function (resolve, reject) { return __awaiter(_this, void 0, void 0, function () {\r\n            var timeout, e_1;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        timeout = setTimeout(function () {\r\n                            reject(new Error(\"Couldn't connect to gateway \" + url));\r\n                        }, 3000);\r\n                        _a.label = 1;\r\n                    case 1:\r\n                        _a.trys.push([1, 3, , 4]);\r\n                        return [4 /*yield*/, this.session.request(HealthApi.method, HealthApi.url, {})];\r\n                    case 2:\r\n                        _a.sent();\r\n                        return [3 /*break*/, 4];\r\n                    case 3:\r\n                        e_1 = _a.sent();\r\n                        if (e_1.message !== 'Request failed with status code 404') {\r\n                            reject(e_1);\r\n                        }\r\n                        else {\r\n                            clearTimeout(timeout);\r\n                            resolve();\r\n                        }\r\n                        return [3 /*break*/, 4];\r\n                    case 4: return [2 /*return*/];\r\n                }\r\n            });\r\n        }); });\r\n    };\r\n    HttpGateway.prototype.deploy = function (request) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var e, event, address;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4 /*yield*/, this.postAndPoll(DeployApi, {\r\n                            data: bytes.toHex(request.data),\r\n                        })];\r\n                    case 1:\r\n                        e = _a.sent();\r\n                        event = e;\r\n                        address = bytes.parseHex(event.address);\r\n                        return [2 /*return*/, { address: address }];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    HttpGateway.prototype.rpc = function (request) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var event;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        if (request.options) {\r\n                            throw new Error('transaction options are not allowed by the developer gateway');\r\n                        }\r\n                        return [4 /*yield*/, this.postAndPoll(RpcApi, {\r\n                                data: bytes.toHex(request.data),\r\n                                address: bytes.toHex(request.address),\r\n                            })];\r\n                    case 1:\r\n                        event = _a.sent();\r\n                        // todo: the developer gateway should have an error if the transaction\r\n                        //       reverted.\r\n                        return [2 /*return*/, {\r\n                                output: event.output,\r\n                            }];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    // TODO: this should be typed to return an event emitter once we address\r\n    //       https://github.com/oasislabs/oasis-client/issues/25\r\n    HttpGateway.prototype.subscribe = function (request) {\r\n        var _this = this;\r\n        var events = new EventEmitter();\r\n        this.session\r\n            .request(SubscribeApi.method, SubscribeApi.url, {\r\n            events: ['logs'],\r\n            filter: urlEncodeFilter(request.filter),\r\n        })\r\n            .then(function (response) {\r\n            if (response.id === undefined || response.id === null) {\r\n                throw new Error(\"subscription failed: \" + response);\r\n            }\r\n            // Store the event -> queueId mapping so that we can unsubscribe later.\r\n            _this.subscriptions.set(request.event, response.id);\r\n            PollingService.instance({\r\n                url: _this.url,\r\n                session: _this.session,\r\n                queueId: response.id,\r\n            }).subscribe(response.id, function (event) {\r\n                events.emit(request.event, event);\r\n            });\r\n        })\r\n            .catch(function (err) {\r\n            events.emit('error', err);\r\n        });\r\n        return events;\r\n    };\r\n    HttpGateway.prototype.unsubscribe = function (request) {\r\n        var queueId = this.subscriptions.get(request.event);\r\n        if (queueId === undefined) {\r\n            throw new Error(\"no subscriptions exist for \" + JSON.stringify(request));\r\n        }\r\n        // Cleanup the client's subscription.\r\n        PollingService.instance({\r\n            url: this.url,\r\n            session: this.session,\r\n            queueId: queueId,\r\n        }).stop();\r\n        this.subscriptions.delete(request.event);\r\n        // Cleanup the gateway's subscription.\r\n        this.session\r\n            .request(UnsubscribeApi.method, UnsubscribeApi.url, {\r\n            id: queueId,\r\n        })\r\n            .catch(function (err) {\r\n            console.error(\"Error unsubscribing from gateway: \" + err);\r\n        });\r\n    };\r\n    HttpGateway.prototype.publicKey = function (request) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var response, event, publicKey;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4 /*yield*/, this.session.request(PublicKeyApi.method, PublicKeyApi.url, {\r\n                            address: bytes.toHex(request.address),\r\n                        })];\r\n                    case 1:\r\n                        response = _a.sent();\r\n                        event = response;\r\n                        publicKey = event.publicKey\r\n                            ? bytes.parseHex(event.publicKey)\r\n                            : undefined;\r\n                        return [2 /*return*/, { publicKey: publicKey }];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Performs the asynchronous developer gateway request by posting a request\r\n     * and then polling for the response.\r\n     */\r\n    HttpGateway.prototype.postAndPoll = function (api, body) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var response, event;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4 /*yield*/, this.session.request(api.method, api.url, body)];\r\n                    case 1:\r\n                        response = _a.sent();\r\n                        return [4 /*yield*/, this.polling.response(response.id)];\r\n                    case 2:\r\n                        event = _a.sent();\r\n                        if (event.cause) {\r\n                            throw new Error(\"poll error: \" + JSON.stringify(event));\r\n                        }\r\n                        return [2 /*return*/, event];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    HttpGateway.prototype.getCode = function (request) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var response;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4 /*yield*/, this.session.request(GetCodeApi.method, GetCodeApi.url, {\r\n                            address: bytes.toHex(request.address),\r\n                        })];\r\n                    case 1:\r\n                        response = _a.sent();\r\n                        return [2 /*return*/, {\r\n                                code: bytes.parseHex(response.code),\r\n                            }];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    HttpGateway.prototype.disconnect = function () {\r\n        // no-op\r\n    };\r\n    // todo: change any to EventEmitter.\r\n    //       https://github.com/oasislabs/oasis-client/issues/25\r\n    HttpGateway.prototype.connectionState = function () {\r\n        // `deploy` et al. don't hide connection problems, so no need to emit these events.\r\n        return this.connectionStateDummy;\r\n    };\r\n    HttpGateway.prototype.hasSigner = function () {\r\n        return false;\r\n    };\r\n    return HttpGateway;\r\n}());\r\nfunction urlEncodeFilter(filter) {\r\n    return (\"address=\" + bytes.toHex(filter.address) +\r\n        '&' +\r\n        filter.topics.map(function (t) { return 'topic=' + t; }).join('&'));\r\n}\r\n//# sourceMappingURL=index.js.map","dts":{"name":"/Users/armaniferrante/Documents/code/src/github.com/oasislabs/tttt/oasis.js/packages/gateway/dist/lib/src/index.d.ts","writeByteOrderMark":false,"text":"import { OasisGateway, RpcRequest, RpcResponse, SubscribeRequest, UnsubscribeRequest, DeployRequest, DeployResponse, PublicKeyRequest, PublicKeyResponse, GetCodeRequest, GetCodeResponse } from '@oasislabs/service';\r\nimport PollingService from './polling';\r\nimport { SubscribeApi, ServicePollApi, SubscribePollApi, GetCodeApi } from './api';\r\nimport { HttpHeaders, Http } from './http';\r\nexport { Http, HttpGateway, ServicePollApi, SubscribeApi, SubscribePollApi, GetCodeApi, PollingService, };\r\nexport default class Gateway implements OasisGateway {\r\n    private inner;\r\n    connectionState: any;\r\n    constructor(url: string, apiToken: string, headers: HttpHeaders);\r\n    deploy(request: DeployRequest): Promise<DeployResponse>;\r\n    rpc(request: RpcRequest): Promise<RpcResponse>;\r\n    subscribe(request: SubscribeRequest): any;\r\n    unsubscribe(request: UnsubscribeRequest): void;\r\n    publicKey(request: PublicKeyRequest): Promise<PublicKeyResponse>;\r\n    getCode(request: GetCodeRequest): Promise<GetCodeResponse>;\r\n    disconnect(): void;\r\n    hasSigner(): boolean;\r\n}\r\ndeclare class HttpGateway implements OasisGateway {\r\n    private url;\r\n    private apiToken;\r\n    private headers;\r\n    /**\r\n     * http makes network requests to the gateway.\r\n     */\r\n    private session;\r\n    /**\r\n     * polling collects all non-subscribe responses from the developer gateway.\r\n     */\r\n    private polling;\r\n    /**\r\n     * Maps event name to the polling service queueId. One for each subscription.\r\n     */\r\n    private subscriptions;\r\n    private connectionStateDummy;\r\n    constructor(url: string, apiToken: string, headers: HttpHeaders);\r\n    /**\r\n     * Sanity check that the gateway is constructed with the correct url.\r\n     */\r\n    private assertGatewayIsResponsive;\r\n    deploy(request: DeployRequest): Promise<DeployResponse>;\r\n    rpc(request: RpcRequest): Promise<RpcResponse>;\r\n    subscribe(request: SubscribeRequest): any;\r\n    unsubscribe(request: UnsubscribeRequest): void;\r\n    publicKey(request: PublicKeyRequest): Promise<PublicKeyResponse>;\r\n    /**\r\n     * Performs the asynchronous developer gateway request by posting a request\r\n     * and then polling for the response.\r\n     */\r\n    private postAndPoll;\r\n    getCode(request: GetCodeRequest): Promise<GetCodeResponse>;\r\n    disconnect(): void;\r\n    connectionState(): any;\r\n    hasSigner(): boolean;\r\n}\r\n"}}
