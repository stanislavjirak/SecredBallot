{"map":"{\"version\":3,\"file\":\"api.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../src/api.ts\"],\"names\":[],\"mappings\":\"AAAA;;;GAGG;AAUH;;GAEG;AACH,MAAM,CAAC,IAAM,SAAS,GAAwB;IAC5C,GAAG,EAAE,uBAAuB;IAC5B,MAAM,EAAE,MAAM;CACf,CAAC;AAEF;;GAEG;AACH,MAAM,CAAC,IAAM,MAAM,GAAwB;IACzC,GAAG,EAAE,wBAAwB;IAC7B,MAAM,EAAE,MAAM;CACf,CAAC;AAEF;;GAEG;AACH,MAAM,CAAC,IAAM,YAAY,GAAwB;IAC/C,GAAG,EAAE,6BAA6B;IAClC,MAAM,EAAE,MAAM;CACf,CAAC;AAEF;;GAEG;AACH,MAAM,CAAC,IAAM,UAAU,GAAwB;IAC7C,GAAG,EAAE,wBAAwB;IAC7B,MAAM,EAAE,MAAM;CACf,CAAC;AAEF;;GAEG;AACH,MAAM,CAAC,IAAM,cAAc,GAAwB;IACjD,GAAG,EAAE,qBAAqB;IAC1B,MAAM,EAAE,MAAM;CACf,CAAC;AAEF;;GAEG;AACH,MAAM,CAAC,IAAM,YAAY,GAAwB;IAC/C,GAAG,EAAE,wBAAwB;IAC7B,MAAM,EAAE,MAAM;CACf,CAAC;AAEF;;GAEG;AACH,MAAM,CAAC,IAAM,gBAAgB,GAAwB;IACnD,GAAG,EAAE,mBAAmB;IACxB,MAAM,EAAE,MAAM;CACf,CAAC;AAEF;;GAEG;AACH,MAAM,CAAC,IAAM,SAAS,GAAwB;IAC5C,GAAG,EAAE,eAAe;IACpB,MAAM,EAAE,KAAK;CACd,CAAC;AAEF;;GAEG;AACH,MAAM,CAAC,IAAM,cAAc,GAAwB;IACjD,GAAG,EAAE,0BAA0B;IAC/B,MAAM,EAAE,MAAM;CACf,CAAC\"}","code":"/**\r\n * The api module defines the types used for the v0/api of the developer\r\n * gateway.\r\n */\r\n/**\r\n * Deploys a services.\r\n */\r\nexport var DeployApi = {\r\n    url: 'v0/api/service/deploy',\r\n    method: 'POST',\r\n};\r\n/**\r\n * Invokes an rpc on a service.\r\n */\r\nexport var RpcApi = {\r\n    url: 'v0/api/service/execute',\r\n    method: 'POST',\r\n};\r\n/**\r\n * Retrieives the public key for a service.\r\n */\r\nexport var PublicKeyApi = {\r\n    url: 'v0/api/service/getPublicKey',\r\n    method: 'POST',\r\n};\r\n/**\r\n * Retrieves the code for an address.\r\n */\r\nexport var GetCodeApi = {\r\n    url: 'v0/api/service/getCode',\r\n    method: 'POST',\r\n};\r\n/**\r\n * Polls for an event on a service.\r\n */\r\nexport var ServicePollApi = {\r\n    url: 'v0/api/service/poll',\r\n    method: 'POST',\r\n};\r\n/**\r\n * Subscribes to a gateway topic.\r\n */\r\nexport var SubscribeApi = {\r\n    url: 'v0/api/event/subscribe',\r\n    method: 'POST',\r\n};\r\n/**\r\n * Polls for an event on a subscription.\r\n */\r\nexport var SubscribePollApi = {\r\n    url: 'v0/api/event/poll',\r\n    method: 'POST',\r\n};\r\n/**\r\n * Retrieves the health status of the gateway.\r\n */\r\nexport var HealthApi = {\r\n    url: 'v0/api/health',\r\n    method: 'GET',\r\n};\r\n/**\r\n * Unsubscribes from a `SubscribeApi` subscription.\r\n */\r\nexport var UnsubscribeApi = {\r\n    url: 'v0/api/event/unsubscribe',\r\n    method: 'POST',\r\n};\r\n//# sourceMappingURL=api.js.map","dts":{"name":"/Users/armaniferrante/Documents/code/src/github.com/oasislabs/tttt/oasis.js/packages/gateway/dist/lib/src/api.d.ts","writeByteOrderMark":false,"text":"/**\r\n * The api module defines the types used for the v0/api of the developer\r\n * gateway.\r\n */\r\n/**\r\n * DeveloperGatewayApi represents the path for a URI for the developer gateway.\r\n */\r\nexport declare type DeveloperGatewayApi = {\r\n    url: string;\r\n    method: string;\r\n};\r\n/**\r\n * Deploys a services.\r\n */\r\nexport declare const DeployApi: DeveloperGatewayApi;\r\n/**\r\n * Invokes an rpc on a service.\r\n */\r\nexport declare const RpcApi: DeveloperGatewayApi;\r\n/**\r\n * Retrieives the public key for a service.\r\n */\r\nexport declare const PublicKeyApi: DeveloperGatewayApi;\r\n/**\r\n * Retrieves the code for an address.\r\n */\r\nexport declare const GetCodeApi: DeveloperGatewayApi;\r\n/**\r\n * Polls for an event on a service.\r\n */\r\nexport declare const ServicePollApi: DeveloperGatewayApi;\r\n/**\r\n * Subscribes to a gateway topic.\r\n */\r\nexport declare const SubscribeApi: DeveloperGatewayApi;\r\n/**\r\n * Polls for an event on a subscription.\r\n */\r\nexport declare const SubscribePollApi: DeveloperGatewayApi;\r\n/**\r\n * Retrieves the health status of the gateway.\r\n */\r\nexport declare const HealthApi: DeveloperGatewayApi;\r\n/**\r\n * Unsubscribes from a `SubscribeApi` subscription.\r\n */\r\nexport declare const UnsubscribeApi: DeveloperGatewayApi;\r\n/**\r\n *  Event is an interface for types that can be fetched by polling on a service.\r\n */\r\nexport declare type Event = ExecuteServiceEvent | PublicKeyEvent | DeployEvent | ErrorEvent;\r\n/**\r\n * ExecuteServiceResponse is an asynchronous response that will be obtained\r\n * using the polling mechanisms.\r\n */\r\nexport declare type ExecuteServiceResponse = {\r\n    id: number;\r\n};\r\n/**\r\n * PollServiceResponse returns a list of asynchronous responses the\r\n * client requested\r\n */\r\nexport declare type PollServiceResponse = {\r\n    offset: number;\r\n    events: Event[] | null;\r\n};\r\n/**\r\n * ExecuteServiceEvent is the event that can be polled by the user\r\n * as a result to a ServiceExecutionRequest.\r\n */\r\nexport declare type ExecuteServiceEvent = {\r\n    id: number;\r\n    address: string;\r\n    output: string;\r\n};\r\nexport declare type PublicKeyEvent = {\r\n    id: number;\r\n    publicKey: string;\r\n    timestamp: number;\r\n    signature: string;\r\n};\r\nexport declare type DeployEvent = {\r\n    id: number;\r\n    address: string;\r\n};\r\n/**\r\n * ErrorEvent is the event that can be polled by the user as a result\r\n * to a request that failed.\r\n */\r\nexport declare type ErrorEvent = {\r\n    id: number;\r\n    cause: Error;\r\n};\r\nexport declare type Error = {\r\n    errorCode: number;\r\n    description: string;\r\n};\r\n"}}
