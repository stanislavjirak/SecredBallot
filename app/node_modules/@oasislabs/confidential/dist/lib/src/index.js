var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
import { bytes } from '@oasislabs/common';
import { Deoxysii } from './aead';
import { KeyStore } from './key-store';
import nacl from './tweetnacl';
import { EncryptError } from './error';
var aead = new Deoxysii();
/**
 * Expected number of bytes of the CIPHER_LENGTH field of the ciphertext layout.
 */
var CIPHER_LEN_SIZE = 8;
/**
 * Expected number of bytes of the AAD_LENGTH field of the ciphertext layout.
 */
var AAD_LEN_SIZE = 8;
/**
 * encrypt takes the given input and returns the encrypted wire format:
 * PUBLIC_KEY || CIPHER_LENGTH || AAD_LENGTH || CIPHER || AAD || NONCE
 * where CIPHER_LENGTH and AAD_LENGTH are encoded big endian uint64
 */
function encrypt(nonce, plaintext, peerPublicKey, publicKey, privateKey, aad) {
    return __awaiter(this, void 0, void 0, function () {
        var ciphertext;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, aead.seal(nonce, plaintext, aad, peerPublicKey, privateKey)];
                case 1:
                    ciphertext = _a.sent();
                    if (ciphertext.length > Number.MAX_SAFE_INTEGER ||
                        aad.length > Number.MAX_SAFE_INTEGER) {
                        throw new EncryptError({
                            nonce: nonce,
                            ciphertext: ciphertext,
                            peerPublicKey: peerPublicKey,
                            publicKey: publicKey,
                            aad: aad,
                        }, 'ciphertext or aad may not exceed 2^53-1');
                    }
                    return [2 /*return*/, bytes.concat([
                            publicKey.bytes(),
                            bytes.parseNumber(ciphertext.length, CIPHER_LEN_SIZE, true),
                            bytes.parseNumber(aad.length, AAD_LEN_SIZE, true),
                            ciphertext,
                            aad,
                            nonce.bytes(),
                        ])];
            }
        });
    });
}
/**
 * decrypt takes the given input and returns the unpacked Decryption payload.
 *
 * @param ciphertext is of the form NONCE || PUBLIC_KEY || CIPHER.
 */
function decrypt(encryption, secretKey) {
    return __awaiter(this, void 0, void 0, function () {
        var _a, peerPublicKey, ciphertext, aad, nonce, plaintext;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    _a = splitEncryptedPayload(encryption), peerPublicKey = _a[0], ciphertext = _a[1], aad = _a[2], nonce = _a[3];
                    if (ciphertext.length > Number.MAX_SAFE_INTEGER ||
                        aad.length > Number.MAX_SAFE_INTEGER) {
                        throw new EncryptError({
                            nonce: nonce,
                            ciphertext: ciphertext,
                            peerPublicKey: peerPublicKey,
                            aad: aad,
                        }, 'ciphertext or aad may not exceed 2^53-1');
                    }
                    return [4 /*yield*/, aead.open(nonce, ciphertext, aad, peerPublicKey, secretKey)];
                case 1:
                    plaintext = _b.sent();
                    return [2 /*return*/, {
                            nonce: nonce,
                            plaintext: plaintext,
                            peerPublicKey: peerPublicKey,
                            aad: aad,
                        }];
            }
        });
    });
}
function nonce() {
    return new Nonce(nacl.randomBytes(aead.nonceSize()));
}
/**
 * Splits the given ciphertext into it's constituent components.
 *
 * @param ciphertext is of the form:
 *        PUBLIC_KEY || CIPHER_LENGTH || AAD_LENGTH || CIPHER || AAD || NONCE
 *        where CIPHER_LENGTH and AAD_LENGTH are encoded big endian uint64
 */
export function splitEncryptedPayload(encryption) {
    if (encryption.length < ciphertextSize(0, 0)) {
        throw new Error("ciphertext is too short: " + encryption);
    }
    var nonce = new Uint8Array(aead.nonceSize());
    var publicKey = new Uint8Array(aead.keySize());
    var cipherLengthOffset = aead.keySize();
    var aadLengthOffset = cipherLengthOffset + CIPHER_LEN_SIZE;
    var cipherOffset = aadLengthOffset + AAD_LEN_SIZE;
    publicKey.set(encryption.slice(0, publicKey.length));
    var cipherLength = bytes.toNumber(encryption.slice(cipherLengthOffset, cipherLengthOffset + CIPHER_LEN_SIZE), true);
    var aadLength = bytes.toNumber(encryption.slice(aadLengthOffset, aadLengthOffset + AAD_LEN_SIZE), true);
    if (encryption.length !== ciphertextSize(cipherLength, aadLength)) {
        throw new Error("invalid ciphertext lenghth: " + encryption);
    }
    var ciphertext = new Uint8Array(cipherLength);
    ciphertext.set(encryption.slice(cipherOffset, cipherOffset + cipherLength));
    var aad = encryption.slice(cipherOffset + cipherLength, cipherOffset + cipherLength + aadLength);
    nonce.set(encryption.slice(cipherOffset + cipherLength + aadLength));
    return [new PublicKey(publicKey), ciphertext, aad, new Nonce(nonce)];
}
function ciphertextSize(cipherLen, aadLen) {
    return (aead.keySize() +
        CIPHER_LEN_SIZE +
        AAD_LEN_SIZE +
        cipherLen +
        aadLen +
        aead.nonceSize());
}
var PublicKey = /** @class */ (function () {
    function PublicKey(inner) {
        this.inner = bytes.assertLength(inner, aead.keySize());
    }
    PublicKey.prototype.bytes = function () {
        return this.inner;
    };
    return PublicKey;
}());
export { PublicKey };
var PrivateKey = /** @class */ (function () {
    function PrivateKey(inner) {
        this.inner = bytes.assertLength(inner, aead.keySize());
    }
    PrivateKey.prototype.bytes = function () {
        return this.inner;
    };
    return PrivateKey;
}());
export { PrivateKey };
var Nonce = /** @class */ (function () {
    function Nonce(inner) {
        this.inner = bytes.assertLength(inner, aead.nonceSize());
    }
    Nonce.prototype.bytes = function () {
        return this.inner;
    };
    return Nonce;
}());
export { Nonce };
export { encrypt, decrypt, nonce, Deoxysii, KeyStore };
//# sourceMappingURL=index.js.map