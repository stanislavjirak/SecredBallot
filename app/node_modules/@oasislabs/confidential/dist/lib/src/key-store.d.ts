import { Db } from '@oasislabs/common';
import { PublicKey, PrivateKey } from './';
export declare class KeyStore {
    /**
     * db is the persistent key-value database holding the keys.
     */
    private db;
    /**
     * provider is the KeyProvider to make network requests to get public keys of
     * services.
     */
    private keyProvider;
    /**
     * LOCAL_KEYS is the db key where the local keypair is stored.
     */
    private static LOCAL_KEYPAIR_KEY;
    constructor(db: Db, keyProvider: KeyProvider);
    /**
     * @returns the public key for the given service.
     */
    publicKey(service: Uint8Array | string): Promise<PublicKey>;
    /**
     * @returns the cached public key if it exists.
     */
    private getCachedPublicKey;
    /**
     * Saves the public key in the cache.
     */
    private setCachedPublicKey;
    /**
     * Makes a request to the keyProvider for the public key for the given service.
     */
    private getRequestPublicKey;
    /**
     * @returns the local keys specific to this user (not a Service). If they don't exist,
     *          create them.
     */
    localKeys(): KeyPair;
    newKeyPair(): KeyPair;
    private static serializeKeyPair;
    private static deserializeKeyPair;
}
export declare type KeyPair = {
    publicKey: PublicKey;
    privateKey: PrivateKey;
};
export interface KeyProvider {
    publicKey(request: PublicKeyRequest): Promise<PublicKeyResponse>;
}
export declare type PublicKeyRequest = {
    address: Uint8Array | string;
};
export declare type PublicKeyResponse = {
    publicKey?: Uint8Array;
};
