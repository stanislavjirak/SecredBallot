import { Deoxysii } from './aead';
import { KeyStore } from './key-store';
/**
 * encrypt takes the given input and returns the encrypted wire format:
 * PUBLIC_KEY || CIPHER_LENGTH || AAD_LENGTH || CIPHER || AAD || NONCE
 * where CIPHER_LENGTH and AAD_LENGTH are encoded big endian uint64
 */
declare function encrypt(nonce: Nonce, plaintext: Uint8Array, peerPublicKey: PublicKey, publicKey: PublicKey, privateKey: PrivateKey, aad: Uint8Array): Promise<Uint8Array>;
/**
 * decrypt takes the given input and returns the unpacked Decryption payload.
 *
 * @param ciphertext is of the form NONCE || PUBLIC_KEY || CIPHER.
 */
declare function decrypt(encryption: Uint8Array, secretKey: PrivateKey): Promise<Decryption>;
declare function nonce(): Nonce;
/**
 * Splits the given ciphertext into it's constituent components.
 *
 * @param ciphertext is of the form:
 *        PUBLIC_KEY || CIPHER_LENGTH || AAD_LENGTH || CIPHER || AAD || NONCE
 *        where CIPHER_LENGTH and AAD_LENGTH are encoded big endian uint64
 */
export declare function splitEncryptedPayload(encryption: Uint8Array): [PublicKey, Uint8Array, Uint8Array, Nonce];
declare type Decryption = {
    nonce: Nonce;
    plaintext: Uint8Array;
    peerPublicKey: PublicKey;
    aad: Uint8Array;
};
export declare type AeadKeys = {
    peerPublicKey: PublicKey;
    publicKey: PublicKey;
    privateKey: PrivateKey;
};
export declare class PublicKey {
    private inner;
    constructor(inner: string | Uint8Array);
    bytes(): Uint8Array;
}
export declare class PrivateKey {
    private inner;
    constructor(inner: string | Uint8Array);
    bytes(): Uint8Array;
}
export declare class Nonce {
    private inner;
    constructor(inner: string | Uint8Array);
    bytes(): Uint8Array;
}
export { encrypt, decrypt, nonce, Deoxysii, KeyStore };
