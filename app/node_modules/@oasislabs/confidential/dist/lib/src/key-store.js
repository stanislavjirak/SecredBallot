var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
import { bytes } from '@oasislabs/common';
import nacl from './tweetnacl';
import { PublicKey, PrivateKey } from './';
import { KeyStoreError } from './error';
var KeyStore = /** @class */ (function () {
    function KeyStore(db, keyProvider) {
        this.db = db;
        this.keyProvider = keyProvider;
    }
    /**
     * @returns the public key for the given service.
     */
    KeyStore.prototype.publicKey = function (service) {
        return __awaiter(this, void 0, void 0, function () {
            var key;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        key = this.getCachedPublicKey(service);
                        if (key) {
                            return [2 /*return*/, key];
                        }
                        return [4 /*yield*/, this.getRequestPublicKey(service)];
                    case 1:
                        // Make a request to the keyProvider for the key.
                        key = _a.sent();
                        // Cache the key.
                        this.setCachedPublicKey(service, key);
                        return [2 /*return*/, key];
                }
            });
        });
    };
    /**
     * @returns the cached public key if it exists.
     */
    KeyStore.prototype.getCachedPublicKey = function (service) {
        service = typeof service === 'string' ? service : bytes.toHex(service);
        var key = this.db.get(service);
        if (!key) {
            return undefined;
        }
        // todo: re-enable caching: https://github.com/oasislabs/oasis.js/issues/150
        // return new PublicKey(bytes.parseHex(key));
        return undefined;
    };
    /**
     * Saves the public key in the cache.
     */
    KeyStore.prototype.setCachedPublicKey = function (service, publicKey) {
        service = typeof service === 'string' ? service : bytes.toHex(service);
        var value = bytes.toHex(publicKey.bytes());
        this.db.set(service, value);
    };
    /**
     * Makes a request to the keyProvider for the public key for the given service.
     */
    KeyStore.prototype.getRequestPublicKey = function (service) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        // Ensure we are using Uint8Array.
                        service = typeof service !== 'string' ? service : bytes.parseHex(service);
                        return [4 /*yield*/, this.keyProvider.publicKey({ address: service })];
                    case 1:
                        response = _a.sent();
                        if (!response.publicKey) {
                            throw new KeyStoreError("KeyProvider did not return a public key: " + response);
                        }
                        return [2 /*return*/, new PublicKey(response.publicKey)];
                }
            });
        });
    };
    /**
     * @returns the local keys specific to this user (not a Service). If they don't exist,
     *          create them.
     */
    KeyStore.prototype.localKeys = function () {
        var serializedKeys = this.db.get(KeyStore.LOCAL_KEYPAIR_KEY);
        if (serializedKeys) {
            return KeyStore.deserializeKeyPair(serializedKeys);
        }
        var keyPair = this.newKeyPair();
        this.db.set(KeyStore.LOCAL_KEYPAIR_KEY, KeyStore.serializeKeyPair(keyPair));
        return keyPair;
    };
    KeyStore.prototype.newKeyPair = function () {
        var kp = nacl.box.keyPair();
        return {
            publicKey: new PublicKey(kp.publicKey),
            privateKey: new PrivateKey(kp.secretKey),
        };
    };
    KeyStore.serializeKeyPair = function (keyPair) {
        return JSON.stringify({
            publicKey: bytes.toHex(keyPair.publicKey.bytes()),
            privateKey: bytes.toHex(keyPair.privateKey.bytes()),
        });
    };
    KeyStore.deserializeKeyPair = function (keyPair) {
        var kp = JSON.parse(keyPair);
        return {
            publicKey: new PublicKey(bytes.parseHex(kp.publicKey)),
            privateKey: new PrivateKey(bytes.parseHex(kp.privateKey)),
        };
    };
    /**
     * LOCAL_KEYS is the db key where the local keypair is stored.
     */
    KeyStore.LOCAL_KEYPAIR_KEY = '@oasislabs/client/me';
    return KeyStore;
}());
export { KeyStore };
//# sourceMappingURL=key-store.js.map