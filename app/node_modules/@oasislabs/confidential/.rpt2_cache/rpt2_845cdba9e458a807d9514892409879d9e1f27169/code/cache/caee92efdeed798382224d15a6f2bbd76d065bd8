{"map":"{\"version\":3,\"file\":\"index.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../src/index.ts\"],\"names\":[],\"mappings\":\"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\"}","code":"import { __awaiter, __generator } from \"tslib\";\r\nimport { bytes } from '@oasislabs/common';\r\nimport { Deoxysii } from './aead';\r\nimport { KeyStore } from './key-store';\r\nimport nacl from './tweetnacl';\r\nimport { EncryptError } from './error';\r\nvar aead = new Deoxysii();\r\n/**\r\n * Expected number of bytes of the CIPHER_LENGTH field of the ciphertext layout.\r\n */\r\nvar CIPHER_LEN_SIZE = 8;\r\n/**\r\n * Expected number of bytes of the AAD_LENGTH field of the ciphertext layout.\r\n */\r\nvar AAD_LEN_SIZE = 8;\r\n/**\r\n * encrypt takes the given input and returns the encrypted wire format:\r\n * PUBLIC_KEY || CIPHER_LENGTH || AAD_LENGTH || CIPHER || AAD || NONCE\r\n * where CIPHER_LENGTH and AAD_LENGTH are encoded big endian uint64\r\n */\r\nfunction encrypt(nonce, plaintext, peerPublicKey, publicKey, privateKey, aad) {\r\n    return __awaiter(this, void 0, void 0, function () {\r\n        var ciphertext;\r\n        return __generator(this, function (_a) {\r\n            switch (_a.label) {\r\n                case 0: return [4 /*yield*/, aead.seal(nonce, plaintext, aad, peerPublicKey, privateKey)];\r\n                case 1:\r\n                    ciphertext = _a.sent();\r\n                    if (ciphertext.length > Number.MAX_SAFE_INTEGER ||\r\n                        aad.length > Number.MAX_SAFE_INTEGER) {\r\n                        throw new EncryptError({\r\n                            nonce: nonce,\r\n                            ciphertext: ciphertext,\r\n                            peerPublicKey: peerPublicKey,\r\n                            publicKey: publicKey,\r\n                            aad: aad,\r\n                        }, 'ciphertext or aad may not exceed 2^53-1');\r\n                    }\r\n                    return [2 /*return*/, bytes.concat([\r\n                            publicKey.bytes(),\r\n                            bytes.parseNumber(ciphertext.length, CIPHER_LEN_SIZE, true),\r\n                            bytes.parseNumber(aad.length, AAD_LEN_SIZE, true),\r\n                            ciphertext,\r\n                            aad,\r\n                            nonce.bytes(),\r\n                        ])];\r\n            }\r\n        });\r\n    });\r\n}\r\n/**\r\n * decrypt takes the given input and returns the unpacked Decryption payload.\r\n *\r\n * @param ciphertext is of the form NONCE || PUBLIC_KEY || CIPHER.\r\n */\r\nfunction decrypt(encryption, secretKey) {\r\n    return __awaiter(this, void 0, void 0, function () {\r\n        var _a, peerPublicKey, ciphertext, aad, nonce, plaintext;\r\n        return __generator(this, function (_b) {\r\n            switch (_b.label) {\r\n                case 0:\r\n                    _a = splitEncryptedPayload(encryption), peerPublicKey = _a[0], ciphertext = _a[1], aad = _a[2], nonce = _a[3];\r\n                    if (ciphertext.length > Number.MAX_SAFE_INTEGER ||\r\n                        aad.length > Number.MAX_SAFE_INTEGER) {\r\n                        throw new EncryptError({\r\n                            nonce: nonce,\r\n                            ciphertext: ciphertext,\r\n                            peerPublicKey: peerPublicKey,\r\n                            aad: aad,\r\n                        }, 'ciphertext or aad may not exceed 2^53-1');\r\n                    }\r\n                    return [4 /*yield*/, aead.open(nonce, ciphertext, aad, peerPublicKey, secretKey)];\r\n                case 1:\r\n                    plaintext = _b.sent();\r\n                    return [2 /*return*/, {\r\n                            nonce: nonce,\r\n                            plaintext: plaintext,\r\n                            peerPublicKey: peerPublicKey,\r\n                            aad: aad,\r\n                        }];\r\n            }\r\n        });\r\n    });\r\n}\r\nfunction nonce() {\r\n    return new Nonce(nacl.randomBytes(aead.nonceSize()));\r\n}\r\n/**\r\n * Splits the given ciphertext into it's constituent components.\r\n *\r\n * @param ciphertext is of the form:\r\n *        PUBLIC_KEY || CIPHER_LENGTH || AAD_LENGTH || CIPHER || AAD || NONCE\r\n *        where CIPHER_LENGTH and AAD_LENGTH are encoded big endian uint64\r\n */\r\nexport function splitEncryptedPayload(encryption) {\r\n    if (encryption.length < ciphertextSize(0, 0)) {\r\n        throw new Error(\"ciphertext is too short: \" + encryption);\r\n    }\r\n    var nonce = new Uint8Array(aead.nonceSize());\r\n    var publicKey = new Uint8Array(aead.keySize());\r\n    var cipherLengthOffset = aead.keySize();\r\n    var aadLengthOffset = cipherLengthOffset + CIPHER_LEN_SIZE;\r\n    var cipherOffset = aadLengthOffset + AAD_LEN_SIZE;\r\n    publicKey.set(encryption.slice(0, publicKey.length));\r\n    var cipherLength = bytes.toNumber(encryption.slice(cipherLengthOffset, cipherLengthOffset + CIPHER_LEN_SIZE), true);\r\n    var aadLength = bytes.toNumber(encryption.slice(aadLengthOffset, aadLengthOffset + AAD_LEN_SIZE), true);\r\n    if (encryption.length !== ciphertextSize(cipherLength, aadLength)) {\r\n        throw new Error(\"invalid ciphertext lenghth: \" + encryption);\r\n    }\r\n    var ciphertext = new Uint8Array(cipherLength);\r\n    ciphertext.set(encryption.slice(cipherOffset, cipherOffset + cipherLength));\r\n    var aad = encryption.slice(cipherOffset + cipherLength, cipherOffset + cipherLength + aadLength);\r\n    nonce.set(encryption.slice(cipherOffset + cipherLength + aadLength));\r\n    return [new PublicKey(publicKey), ciphertext, aad, new Nonce(nonce)];\r\n}\r\nfunction ciphertextSize(cipherLen, aadLen) {\r\n    return (aead.keySize() +\r\n        CIPHER_LEN_SIZE +\r\n        AAD_LEN_SIZE +\r\n        cipherLen +\r\n        aadLen +\r\n        aead.nonceSize());\r\n}\r\nvar PublicKey = /** @class */ (function () {\r\n    function PublicKey(inner) {\r\n        this.inner = bytes.assertLength(inner, aead.keySize());\r\n    }\r\n    PublicKey.prototype.bytes = function () {\r\n        return this.inner;\r\n    };\r\n    return PublicKey;\r\n}());\r\nexport { PublicKey };\r\nvar PrivateKey = /** @class */ (function () {\r\n    function PrivateKey(inner) {\r\n        this.inner = bytes.assertLength(inner, aead.keySize());\r\n    }\r\n    PrivateKey.prototype.bytes = function () {\r\n        return this.inner;\r\n    };\r\n    return PrivateKey;\r\n}());\r\nexport { PrivateKey };\r\nvar Nonce = /** @class */ (function () {\r\n    function Nonce(inner) {\r\n        this.inner = bytes.assertLength(inner, aead.nonceSize());\r\n    }\r\n    Nonce.prototype.bytes = function () {\r\n        return this.inner;\r\n    };\r\n    return Nonce;\r\n}());\r\nexport { Nonce };\r\nexport { encrypt, decrypt, nonce, Deoxysii, KeyStore };\r\n//# sourceMappingURL=index.js.map","dts":{"name":"/Users/armaniferrante/Documents/code/src/github.com/oasislabs/qwer/oasis.js/packages/confidential/dist/lib/src/index.d.ts","writeByteOrderMark":false,"text":"import { Deoxysii } from './aead';\r\nimport { KeyStore } from './key-store';\r\n/**\r\n * encrypt takes the given input and returns the encrypted wire format:\r\n * PUBLIC_KEY || CIPHER_LENGTH || AAD_LENGTH || CIPHER || AAD || NONCE\r\n * where CIPHER_LENGTH and AAD_LENGTH are encoded big endian uint64\r\n */\r\ndeclare function encrypt(nonce: Nonce, plaintext: Uint8Array, peerPublicKey: PublicKey, publicKey: PublicKey, privateKey: PrivateKey, aad: Uint8Array): Promise<Uint8Array>;\r\n/**\r\n * decrypt takes the given input and returns the unpacked Decryption payload.\r\n *\r\n * @param ciphertext is of the form NONCE || PUBLIC_KEY || CIPHER.\r\n */\r\ndeclare function decrypt(encryption: Uint8Array, secretKey: PrivateKey): Promise<Decryption>;\r\ndeclare function nonce(): Nonce;\r\n/**\r\n * Splits the given ciphertext into it's constituent components.\r\n *\r\n * @param ciphertext is of the form:\r\n *        PUBLIC_KEY || CIPHER_LENGTH || AAD_LENGTH || CIPHER || AAD || NONCE\r\n *        where CIPHER_LENGTH and AAD_LENGTH are encoded big endian uint64\r\n */\r\nexport declare function splitEncryptedPayload(encryption: Uint8Array): [PublicKey, Uint8Array, Uint8Array, Nonce];\r\ndeclare type Decryption = {\r\n    nonce: Nonce;\r\n    plaintext: Uint8Array;\r\n    peerPublicKey: PublicKey;\r\n    aad: Uint8Array;\r\n};\r\nexport declare type AeadKeys = {\r\n    peerPublicKey: PublicKey;\r\n    publicKey: PublicKey;\r\n    privateKey: PrivateKey;\r\n};\r\nexport declare class PublicKey {\r\n    private inner;\r\n    constructor(inner: string | Uint8Array);\r\n    bytes(): Uint8Array;\r\n}\r\nexport declare class PrivateKey {\r\n    private inner;\r\n    constructor(inner: string | Uint8Array);\r\n    bytes(): Uint8Array;\r\n}\r\nexport declare class Nonce {\r\n    private inner;\r\n    constructor(inner: string | Uint8Array);\r\n    bytes(): Uint8Array;\r\n}\r\nexport { encrypt, decrypt, nonce, Deoxysii, KeyStore };\r\n"}}
