{"map":"{\"version\":3,\"file\":\"key-store.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../src/key-store.ts\"],\"names\":[],\"mappings\":\"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\"}","code":"import { __awaiter, __generator } from \"tslib\";\r\nimport { bytes } from '@oasislabs/common';\r\nimport nacl from './tweetnacl';\r\nimport { PublicKey, PrivateKey } from './';\r\nimport { KeyStoreError } from './error';\r\nvar KeyStore = /** @class */ (function () {\r\n    function KeyStore(db, keyProvider) {\r\n        this.db = db;\r\n        this.keyProvider = keyProvider;\r\n    }\r\n    /**\r\n     * @returns the public key for the given service.\r\n     */\r\n    KeyStore.prototype.publicKey = function (service) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var key;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        key = this.getCachedPublicKey(service);\r\n                        if (key) {\r\n                            return [2 /*return*/, key];\r\n                        }\r\n                        return [4 /*yield*/, this.getRequestPublicKey(service)];\r\n                    case 1:\r\n                        // Make a request to the keyProvider for the key.\r\n                        key = _a.sent();\r\n                        // Cache the key.\r\n                        this.setCachedPublicKey(service, key);\r\n                        return [2 /*return*/, key];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * @returns the cached public key if it exists.\r\n     */\r\n    KeyStore.prototype.getCachedPublicKey = function (service) {\r\n        service = typeof service === 'string' ? service : bytes.toHex(service);\r\n        var key = this.db.get(service);\r\n        if (!key) {\r\n            return undefined;\r\n        }\r\n        // todo: re-enable caching: https://github.com/oasislabs/oasis.js/issues/150\r\n        // return new PublicKey(bytes.parseHex(key));\r\n        return undefined;\r\n    };\r\n    /**\r\n     * Saves the public key in the cache.\r\n     */\r\n    KeyStore.prototype.setCachedPublicKey = function (service, publicKey) {\r\n        service = typeof service === 'string' ? service : bytes.toHex(service);\r\n        var value = bytes.toHex(publicKey.bytes());\r\n        this.db.set(service, value);\r\n    };\r\n    /**\r\n     * Makes a request to the keyProvider for the public key for the given service.\r\n     */\r\n    KeyStore.prototype.getRequestPublicKey = function (service) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var response;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        // Ensure we are using Uint8Array.\r\n                        service = typeof service !== 'string' ? service : bytes.parseHex(service);\r\n                        return [4 /*yield*/, this.keyProvider.publicKey({ address: service })];\r\n                    case 1:\r\n                        response = _a.sent();\r\n                        if (!response.publicKey) {\r\n                            throw new KeyStoreError(\"KeyProvider did not return a public key: \" + response);\r\n                        }\r\n                        return [2 /*return*/, new PublicKey(response.publicKey)];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * @returns the local keys specific to this user (not a Service). If they don't exist,\r\n     *          create them.\r\n     */\r\n    KeyStore.prototype.localKeys = function () {\r\n        var serializedKeys = this.db.get(KeyStore.LOCAL_KEYPAIR_KEY);\r\n        if (serializedKeys) {\r\n            return KeyStore.deserializeKeyPair(serializedKeys);\r\n        }\r\n        var keyPair = this.newKeyPair();\r\n        this.db.set(KeyStore.LOCAL_KEYPAIR_KEY, KeyStore.serializeKeyPair(keyPair));\r\n        return keyPair;\r\n    };\r\n    KeyStore.prototype.newKeyPair = function () {\r\n        var kp = nacl.box.keyPair();\r\n        return {\r\n            publicKey: new PublicKey(kp.publicKey),\r\n            privateKey: new PrivateKey(kp.secretKey),\r\n        };\r\n    };\r\n    KeyStore.serializeKeyPair = function (keyPair) {\r\n        return JSON.stringify({\r\n            publicKey: bytes.toHex(keyPair.publicKey.bytes()),\r\n            privateKey: bytes.toHex(keyPair.privateKey.bytes()),\r\n        });\r\n    };\r\n    KeyStore.deserializeKeyPair = function (keyPair) {\r\n        var kp = JSON.parse(keyPair);\r\n        return {\r\n            publicKey: new PublicKey(bytes.parseHex(kp.publicKey)),\r\n            privateKey: new PrivateKey(bytes.parseHex(kp.privateKey)),\r\n        };\r\n    };\r\n    /**\r\n     * LOCAL_KEYS is the db key where the local keypair is stored.\r\n     */\r\n    KeyStore.LOCAL_KEYPAIR_KEY = '@oasislabs/client/me';\r\n    return KeyStore;\r\n}());\r\nexport { KeyStore };\r\n//# sourceMappingURL=key-store.js.map","dts":{"name":"/Users/armaniferrante/Documents/code/src/github.com/oasislabs/qwer/oasis.js/packages/confidential/dist/lib/src/key-store.d.ts","writeByteOrderMark":false,"text":"import { Db } from '@oasislabs/common';\r\nimport { PublicKey, PrivateKey } from './';\r\nexport declare class KeyStore {\r\n    /**\r\n     * db is the persistent key-value database holding the keys.\r\n     */\r\n    private db;\r\n    /**\r\n     * provider is the KeyProvider to make network requests to get public keys of\r\n     * services.\r\n     */\r\n    private keyProvider;\r\n    /**\r\n     * LOCAL_KEYS is the db key where the local keypair is stored.\r\n     */\r\n    private static LOCAL_KEYPAIR_KEY;\r\n    constructor(db: Db, keyProvider: KeyProvider);\r\n    /**\r\n     * @returns the public key for the given service.\r\n     */\r\n    publicKey(service: Uint8Array | string): Promise<PublicKey>;\r\n    /**\r\n     * @returns the cached public key if it exists.\r\n     */\r\n    private getCachedPublicKey;\r\n    /**\r\n     * Saves the public key in the cache.\r\n     */\r\n    private setCachedPublicKey;\r\n    /**\r\n     * Makes a request to the keyProvider for the public key for the given service.\r\n     */\r\n    private getRequestPublicKey;\r\n    /**\r\n     * @returns the local keys specific to this user (not a Service). If they don't exist,\r\n     *          create them.\r\n     */\r\n    localKeys(): KeyPair;\r\n    newKeyPair(): KeyPair;\r\n    private static serializeKeyPair;\r\n    private static deserializeKeyPair;\r\n}\r\nexport declare type KeyPair = {\r\n    publicKey: PublicKey;\r\n    privateKey: PrivateKey;\r\n};\r\nexport interface KeyProvider {\r\n    publicKey(request: PublicKeyRequest): Promise<PublicKeyResponse>;\r\n}\r\nexport declare type PublicKeyRequest = {\r\n    address: Uint8Array | string;\r\n};\r\nexport declare type PublicKeyResponse = {\r\n    publicKey?: Uint8Array;\r\n};\r\n"}}
