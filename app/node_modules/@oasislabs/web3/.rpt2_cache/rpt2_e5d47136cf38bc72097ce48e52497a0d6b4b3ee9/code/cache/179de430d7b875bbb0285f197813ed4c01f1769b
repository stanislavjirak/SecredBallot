{"map":"{\"version\":3,\"file\":\"provider.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../src/web3/provider.ts\"],\"names\":[],\"mappings\":\"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\"}","code":"import { __awaiter, __extends, __generator } from \"tslib\";\r\nimport { EventEmitter } from 'eventemitter3';\r\nimport { JsonRpcWebSocket, } from '../websocket';\r\nimport { Subscriptions } from '../subscriptions';\r\nimport { Web3Error } from '../error';\r\nimport { TransactionFactory } from '../transaction';\r\n/**\r\n * Web3Provider is the brains behind the `Web3` class' implementation, exposing\r\n * the `send` method, that is responsible for making the JSON RPC request to\r\n * the Web3 gateway server. It acts as a sort of middle man to ensure requests\r\n * are handled properly and signed by a wallet when needed. Specficially, it\r\n *\r\n * - Transforms rpc requests to their desired behavior, e.g., converts\r\n *   eth_sendTransaction to eth_sendRawTransaction.\r\n * - Maintains subscription state.\r\n * - Executes the JSON RPC request and returns the response\r\n *\r\n * For making web3 calls, one should use the `Web3` class.\r\n *\r\n */\r\nvar Web3Provider = /** @class */ (function () {\r\n    function Web3Provider(url, wallet) {\r\n        this.url = url;\r\n        this.wallet = wallet;\r\n        this.subscriptions = new Subscriptions();\r\n        this.ws = Web3Provider.makeWs(url, this.subscriptions);\r\n        if (wallet) {\r\n            this.transactions = new TransactionFactory(wallet.address, this.ws);\r\n        }\r\n    }\r\n    Web3Provider.makeWs = function (url, subscriptions) {\r\n        return new JsonRpcWebSocket(url, [subscriptions]);\r\n    };\r\n    /**\r\n     * Assumes all params are properly formatted at this point.\r\n     */\r\n    Web3Provider.prototype.send = function (method, params) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var response;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4 /*yield*/, this._send(method, params)];\r\n                    case 1:\r\n                        response = _a.sent();\r\n                        if (response.result === undefined) {\r\n                            throw new Web3Error(method, params, \"error executing \" + method + \": \" + JSON.stringify(response));\r\n                        }\r\n                        return [2 /*return*/, this.handleResponse(method, params, response.result)];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    Web3Provider.prototype._send = function (method, params) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            return __generator(this, function (_a) {\r\n                if (method === 'eth_sendTransaction') {\r\n                    return [2 /*return*/, this.eth_sendTransaction(method, params)];\r\n                }\r\n                else if (method === 'eth_unsubscribe') {\r\n                    this.subscriptions.remove(params[0]);\r\n                    return [2 /*return*/, this.ws.request({ method: method, params: params })];\r\n                }\r\n                else {\r\n                    return [2 /*return*/, this.ws.request({ method: method, params: params })];\r\n                }\r\n                return [2 /*return*/];\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Transforms all calls to eth_sendTransaction to signed calls to\r\n     * eth_sendRawTransaction.\r\n     */\r\n    Web3Provider.prototype.eth_sendTransaction = function (method, params) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var tx, rawTx;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        if (!this.wallet) {\r\n                            throw new Web3Error(method, params, \"must have a wallet to execute eth_sendTransaction\");\r\n                        }\r\n                        return [4 /*yield*/, this.transactions.create(params[0])];\r\n                    case 1:\r\n                        tx = _a.sent();\r\n                        return [4 /*yield*/, this.wallet.sign(tx)];\r\n                    case 2:\r\n                        rawTx = _a.sent();\r\n                        return [2 /*return*/, this.ws.request({\r\n                                method: 'eth_sendRawTransaction',\r\n                                params: [rawTx],\r\n                            })];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    Web3Provider.prototype.handleResponse = function (rpcMethod, params, response) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            return __generator(this, function (_a) {\r\n                if (rpcMethod === 'eth_subscribe') {\r\n                    return [2 /*return*/, this.subscribeResponse(response)];\r\n                }\r\n                else {\r\n                    return [2 /*return*/, response];\r\n                }\r\n                return [2 /*return*/];\r\n            });\r\n        });\r\n    };\r\n    Web3Provider.prototype.subscribeResponse = function (subscriptionId) {\r\n        var subscription = new Subscription(subscriptionId);\r\n        this.subscriptions.add(subscriptionId, function (event) {\r\n            subscription.emit('data', event.params.result);\r\n        });\r\n        return subscription;\r\n    };\r\n    return Web3Provider;\r\n}());\r\nexport default Web3Provider;\r\nvar Subscription = /** @class */ (function (_super) {\r\n    __extends(Subscription, _super);\r\n    /**\r\n     * @param `id` is the subscription id given by the remote web3 gateway.\r\n     */\r\n    function Subscription(id) {\r\n        var _this = _super.call(this) || this;\r\n        _this.id = id;\r\n        return _this;\r\n    }\r\n    Subscription.prototype.unsubscribe = function () {\r\n        throw new Error('unsubscribe is not implemented');\r\n    };\r\n    Subscription.prototype.subscribe = function () {\r\n        throw new Error('subscribe is not implemented');\r\n    };\r\n    return Subscription;\r\n}(EventEmitter));\r\nexport { Subscription };\r\n//# sourceMappingURL=provider.js.map","dts":{"name":"/Users/armaniferrante/Documents/code/src/github.com/oasislabs/tttt/oasis.js/packages/web3/dist/lib/src/web3/provider.d.ts","writeByteOrderMark":false,"text":"import { EventEmitter } from 'eventemitter3';\r\nimport { JsonRpcWebSocket } from '../websocket';\r\nimport { Wallet } from '../gateway';\r\nimport { TransactionFactory } from '../transaction';\r\n/**\r\n * Web3Provider is the brains behind the `Web3` class' implementation, exposing\r\n * the `send` method, that is responsible for making the JSON RPC request to\r\n * the Web3 gateway server. It acts as a sort of middle man to ensure requests\r\n * are handled properly and signed by a wallet when needed. Specficially, it\r\n *\r\n * - Transforms rpc requests to their desired behavior, e.g., converts\r\n *   eth_sendTransaction to eth_sendRawTransaction.\r\n * - Maintains subscription state.\r\n * - Executes the JSON RPC request and returns the response\r\n *\r\n * For making web3 calls, one should use the `Web3` class.\r\n *\r\n */\r\nexport default class Web3Provider {\r\n    private url;\r\n    private wallet?;\r\n    readonly ws: JsonRpcWebSocket;\r\n    readonly transactions?: TransactionFactory;\r\n    private subscriptions;\r\n    constructor(url: string, wallet?: Wallet | undefined);\r\n    private static makeWs;\r\n    /**\r\n     * Assumes all params are properly formatted at this point.\r\n     */\r\n    send(method: string, params: any[]): Promise<any>;\r\n    private _send;\r\n    /**\r\n     * Transforms all calls to eth_sendTransaction to signed calls to\r\n     * eth_sendRawTransaction.\r\n     */\r\n    private eth_sendTransaction;\r\n    private handleResponse;\r\n    private subscribeResponse;\r\n}\r\nexport declare class Subscription extends EventEmitter {\r\n    readonly id: string;\r\n    /**\r\n     * @param `id` is the subscription id given by the remote web3 gateway.\r\n     */\r\n    constructor(id: string);\r\n    unsubscribe(): void;\r\n    subscribe(): void;\r\n}\r\n"}}
