{"map":"{\"version\":3,\"file\":\"websocket.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../src/websocket.ts\"],\"names\":[],\"mappings\":\"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\"}","code":"import { EventEmitter } from 'eventemitter3';\r\nimport { JsonRpcWebSocketError } from './error';\r\n/**\r\n * We internally try to handle reconnection when the websocket closes abnormally,\r\n * but if we encounter a bunch of errors without ever successfully opening a\r\n * connection, we'll forward a trouble condition to our consumer. This is the\r\n * number of consecutive errors after which we inform our consumer.\r\n */\r\nvar ERROR_FORWARD_THRESHOLD = 2;\r\n/**\r\n * Time (in milliseconds) before a request sent through a JsonRpcWebSocket\r\n * expires.\r\n *\r\n * Some RPCs like oasis_invoke are synchronous at the gateway and so this is\r\n * a bit high. We should bring this down once we remove all synchrous rpcs.\r\n */\r\nvar REQUEST_TIMEOUT_DURATION = 30000;\r\nvar JsonRpcWebSocket = /** @class */ (function () {\r\n    /**\r\n     * @param url is the websocket url to connect to.\r\n     * @param middleware is the middleware to use to process websocket messages.\r\n     * @param wsFactory? is given as an optional WebSocketFactory implementation\r\n     *        (for testing).\r\n     */\r\n    function JsonRpcWebSocket(url, middleware, wsFactory) {\r\n        this.url = url;\r\n        /**\r\n         * responses implements a request-response pattern for `send` requests.\r\n         */\r\n        this.responses = new EventEmitter();\r\n        /**\r\n         * JSON rpc request id auto counter.\r\n         */\r\n        this.requestId = 0;\r\n        /**\r\n         * lifecycle emits events pertaining to the lifecycle of the websocket,\r\n         * e.g., when it opens or closes.\r\n         */\r\n        this.lifecycle = new EventEmitter();\r\n        /**\r\n         * This counts how many websocket errors we've encountered without an `open` event.\r\n         */\r\n        this.consecutiveErrors = 0;\r\n        /**\r\n         * True iff we want to close the websocket immediately when it is opened.\r\n         * This is set when we are asked to close the websocket in the middle of\r\n         * establishing a connection, which we can't do; hence this hack.\r\n         */\r\n        this.closeOnOpen = false;\r\n        /**\r\n         * connectionState emits `trouble` and `ok` events.\r\n         */\r\n        // TODO: this should be typed to be an event emitter once we address\r\n        //       https://github.com/oasislabs/oasis-client/issues/25\r\n        this.connectionState = new EventEmitter();\r\n        this.middleware = middleware;\r\n        this.websocketFactory = wsFactory ? wsFactory : new EnvWebSocketFactory();\r\n        this.websocket = this.websocketFactory.make(url);\r\n        this.addEventListeners();\r\n    }\r\n    JsonRpcWebSocket.prototype.addEventListeners = function () {\r\n        this.websocket.addEventListener('message', this.message.bind(this));\r\n        this.websocket.addEventListener('open', this.open.bind(this));\r\n        this.websocket.addEventListener('error', this.error.bind(this));\r\n        this.websocket.addEventListener('close', this.close.bind(this));\r\n    };\r\n    JsonRpcWebSocket.prototype.removeEventListeners = function () {\r\n        this.websocket.removeEventListener('message', this.message);\r\n        this.websocket.removeEventListener('open', this.open);\r\n        this.websocket.removeEventListener('error', this.error);\r\n        this.websocket.removeEventListener('close', this.close);\r\n    };\r\n    JsonRpcWebSocket.prototype.message = function (m) {\r\n        m = this.runMiddleware(m);\r\n        if (!m) {\r\n            return;\r\n        }\r\n        this.handler(m);\r\n    };\r\n    JsonRpcWebSocket.prototype.runMiddleware = function (data) {\r\n        this.middleware.forEach(function (m) {\r\n            data = m.handle(data);\r\n            if (!data) {\r\n                return undefined;\r\n            }\r\n        });\r\n        return data;\r\n    };\r\n    JsonRpcWebSocket.prototype.handler = function (m) {\r\n        var data = JSON.parse(m.data);\r\n        this.responses.emit(\"\" + data.id, data);\r\n    };\r\n    JsonRpcWebSocket.prototype.open = function (event) {\r\n        this.lifecycle.emit('open');\r\n        // We were asked to close this websocket while connecting,\r\n        // so finish the jobn.\r\n        if (this.closeOnOpen) {\r\n            this.websocket.close(CloseEvent.NORMAL);\r\n            return;\r\n        }\r\n        if (this.consecutiveErrors >= ERROR_FORWARD_THRESHOLD) {\r\n            // We have notified our consumer of connection trouble, so now notify\r\n            // them that we've reconnected.\r\n            this.connectionState.emit('ok');\r\n        }\r\n        this.consecutiveErrors = 0;\r\n    };\r\n    JsonRpcWebSocket.prototype.error = function (event) {\r\n        this.consecutiveErrors++;\r\n        if (this.consecutiveErrors === ERROR_FORWARD_THRESHOLD) {\r\n            // This is when we've crossed the threshold for forwarding the connection\r\n            // trouble condition. Additionally, don't repeatedly notify after we've\r\n            // already notified, until after we successfully reconnect.\r\n            this.connectionState.emit('trouble');\r\n        }\r\n    };\r\n    JsonRpcWebSocket.prototype.close = function (event) {\r\n        this.removeEventListeners();\r\n        if (event.code !== CloseEvent.NORMAL) {\r\n            this.connect();\r\n            return;\r\n        }\r\n    };\r\n    JsonRpcWebSocket.prototype.connect = function () {\r\n        // @ts-ignore\r\n        this.websocket = this.websocketFactory.make(this.url);\r\n        this.addEventListeners();\r\n    };\r\n    JsonRpcWebSocket.prototype.disconnect = function () {\r\n        // The websocket is open so go ahead and close it.\r\n        if (this.websocket.readyState === this.websocket.OPEN) {\r\n            this.websocket.close(CloseEvent.NORMAL);\r\n        }\r\n        // The websocket is in the middle of establishing a connection.\r\n        // We can't close a websocket if it's not open, so wait for it\r\n        // to be open then close.\r\n        else if (this.websocket.readyState === this.websocket.CONNECTING) {\r\n            this.closeOnOpen = true;\r\n        }\r\n    };\r\n    JsonRpcWebSocket.prototype.request = function (request) {\r\n        var _this = this;\r\n        return new Promise(function (resolve, reject) {\r\n            // WebSocket is not open, so wait until it's open and try again.\r\n            if (_this.websocket.readyState !== _this.websocket.OPEN) {\r\n                _this.lifecycle.once('open', function () {\r\n                    _this.request(request)\r\n                        .then(resolve)\r\n                        .catch(console.error);\r\n                });\r\n                return;\r\n            }\r\n            // Websocket is open so proceed.\r\n            var id = _this.nextId();\r\n            // Function invoked when a response event on topic `id` is emitted.\r\n            var responseListener;\r\n            // Set timeout for this request.\r\n            var timeout = setTimeout(function () {\r\n                _this.responses.removeListener(responseListener);\r\n                var error = new JsonRpcWebSocketError(request, \"request timeout \" + REQUEST_TIMEOUT_DURATION + \" ms have passed\");\r\n                reject(error);\r\n            }, REQUEST_TIMEOUT_DURATION);\r\n            responseListener = function (jsonResponse) {\r\n                clearTimeout(timeout);\r\n                if (jsonResponse.error) {\r\n                    reject(jsonResponse.error);\r\n                }\r\n                else {\r\n                    resolve(jsonResponse);\r\n                }\r\n            };\r\n            _this.responses.once(\"\" + id, responseListener);\r\n            _this.websocket.send(JSON.stringify({\r\n                id: id,\r\n                jsonrpc: '2.0',\r\n                method: request.method,\r\n                params: request.params,\r\n            }));\r\n        });\r\n    };\r\n    JsonRpcWebSocket.prototype.nextId = function () {\r\n        this.requestId += 1;\r\n        return this.requestId - 1;\r\n    };\r\n    return JsonRpcWebSocket;\r\n}());\r\nexport { JsonRpcWebSocket };\r\nvar CloseEvent;\r\n(function (CloseEvent) {\r\n    CloseEvent[CloseEvent[\"NORMAL\"] = 1000] = \"NORMAL\";\r\n})(CloseEvent || (CloseEvent = {}));\r\n/**\r\n * Creates a WebSocket based upon whether we're in a node or browser\r\n * environment.\r\n */\r\nvar EnvWebSocketFactory = /** @class */ (function () {\r\n    function EnvWebSocketFactory() {\r\n    }\r\n    EnvWebSocketFactory.prototype.make = function (url) {\r\n        // tslint:disable-next-line\r\n        return typeof WebSocket !== 'undefined'\r\n            ? // Browser.\r\n                new WebSocket(url)\r\n            : // Node.\r\n                new (require('ws'))(url);\r\n    };\r\n    return EnvWebSocketFactory;\r\n}());\r\n//# sourceMappingURL=websocket.js.map","dts":{"name":"/Users/armaniferrante/Documents/code/src/github.com/oasislabs/tttt/oasis.js/packages/web3/dist/lib/src/websocket.d.ts","writeByteOrderMark":false,"text":"export declare class JsonRpcWebSocket implements JsonRpc {\r\n    private url;\r\n    /**\r\n     * responses implements a request-response pattern for `send` requests.\r\n     */\r\n    private responses;\r\n    /**\r\n     * Middleware to plug into the websocket connection. Processes ws messages\r\n     * prior to the default handler defined here.\r\n     */\r\n    private middleware;\r\n    /**\r\n     * JSON rpc request id auto counter.\r\n     */\r\n    private requestId;\r\n    /**\r\n     * lifecycle emits events pertaining to the lifecycle of the websocket,\r\n     * e.g., when it opens or closes.\r\n     */\r\n    private lifecycle;\r\n    /**\r\n     * WebSocket through which all requests are sent.\r\n     */\r\n    private websocket;\r\n    /**\r\n     * Creates websocket connections.\r\n     */\r\n    private websocketFactory;\r\n    /**\r\n     * This counts how many websocket errors we've encountered without an `open` event.\r\n     */\r\n    private consecutiveErrors;\r\n    /**\r\n     * True iff we want to close the websocket immediately when it is opened.\r\n     * This is set when we are asked to close the websocket in the middle of\r\n     * establishing a connection, which we can't do; hence this hack.\r\n     */\r\n    private closeOnOpen;\r\n    /**\r\n     * connectionState emits `trouble` and `ok` events.\r\n     */\r\n    connectionState: any;\r\n    /**\r\n     * @param url is the websocket url to connect to.\r\n     * @param middleware is the middleware to use to process websocket messages.\r\n     * @param wsFactory? is given as an optional WebSocketFactory implementation\r\n     *        (for testing).\r\n     */\r\n    constructor(url: string, middleware: Middleware[], wsFactory?: WebSocketFactory);\r\n    private addEventListeners;\r\n    private removeEventListeners;\r\n    private message;\r\n    private runMiddleware;\r\n    private handler;\r\n    private open;\r\n    private error;\r\n    private close;\r\n    connect(): void;\r\n    disconnect(): void;\r\n    request(request: JsonRpcRequest): Promise<JsonRpcResponse>;\r\n    private nextId;\r\n}\r\nexport interface Middleware {\r\n    handle(message: any): any | undefined;\r\n}\r\nexport interface JsonRpc {\r\n    request(request: JsonRpcRequest): Promise<JsonRpcResponse>;\r\n}\r\nexport declare type JsonRpcRequest = {\r\n    method: string;\r\n    params: any[];\r\n};\r\nexport declare type JsonRpcResponse = {\r\n    result?: any;\r\n};\r\nexport interface WebSocketFactory {\r\n    make(url: string): WebSocket;\r\n}\r\n"}}
