import { OasisGateway, DeployRequest, DeployResponse, RpcRequest, RpcResponse, SubscribeRequest, UnsubscribeRequest, PublicKeyRequest, PublicKeyResponse, GetCodeRequest, GetCodeResponse } from '@oasislabs/service';
import { Transaction } from './transaction';
import { Web3Namespace } from './web3';
export default class Web3Gateway implements OasisGateway {
    /**
     * Private variables used to manage the gateway.
     */
    private _inner;
    /**
     * `eth_*` web3 rpc methods.
     */
    eth: Web3Namespace;
    /**
     * `oasis_*` web3 rpc methods.
     */
    oasis: Web3Namespace;
    /**
     * `net_*` web3 rpc methods.
     */
    net: Web3Namespace;
    constructor(url: string, wallet?: Wallet);
    private setupInner;
    /**
     * Sanity check that the gateway is constructed with the correct url.
     */
    private assertGatewayIsResponsive;
    deploy(request: DeployRequest): Promise<DeployResponse>;
    rpc(request: RpcRequest): Promise<RpcResponse>;
    subscribe(request: SubscribeRequest): any;
    web3Subscribe(eventName: string, params: any[]): any;
    unsubscribe(request: UnsubscribeRequest): Promise<any>;
    publicKey(request: PublicKeyRequest): Promise<PublicKeyResponse>;
    disconnect(): void;
    getCode(request: GetCodeRequest): Promise<GetCodeResponse>;
    connectionState(): any;
    hasSigner(): boolean;
}
export interface Wallet {
    sign(tx: Transaction): Promise<string>;
    address: string;
}
