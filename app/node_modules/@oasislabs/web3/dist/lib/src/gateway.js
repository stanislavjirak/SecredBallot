var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
import { EventEmitter } from 'eventemitter3';
import { bytes, sleep } from '@oasislabs/common';
import { Web3GatewayError, TransactionReverted, RpcFailure } from './error';
import { Web3, Web3Provider } from './web3';
var Web3Gateway = /** @class */ (function () {
    function Web3Gateway(url, wallet) {
        this._inner = this.setupInner(url, wallet);
        this.eth = this._inner.web3.eth;
        this.oasis = this._inner.web3.oasis;
        this.net = this._inner.web3.net;
    }
    Web3Gateway.prototype.setupInner = function (url, wallet) {
        var web3 = new Web3(new Web3Provider(url, wallet));
        var subscriptionIds = new Map();
        return {
            wallet: wallet,
            web3: web3,
            subscriptionIds: subscriptionIds,
        };
    };
    /**
     * Sanity check that the gateway is constructed with the correct url.
     */
    Web3Gateway.prototype.assertGatewayIsResponsive = function (url) {
        var _this = this;
        return new Promise(function (resolve, reject) { return __awaiter(_this, void 0, void 0, function () {
            var timeout, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        timeout = setTimeout(function () {
                            reject(new Error("Couldn't connect to gateway " + url));
                        }, 3000);
                        return [4 /*yield*/, this.net.version()];
                    case 1:
                        response = _a.sent();
                        if (parseInt(response, 10) <= 0) {
                            reject(new Error("Invalid gateway response " + response));
                        }
                        clearTimeout(timeout);
                        resolve();
                        return [2 /*return*/];
                }
            });
        }); });
    };
    Web3Gateway.prototype.deploy = function (request) {
        return __awaiter(this, void 0, void 0, function () {
            var txParams, tx, rawTx, txHash, receipt, tries;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!this._inner.wallet) {
                            throw new Web3GatewayError('The Web3Gateway must have a Wallet to deploy');
                        }
                        txParams = Object.assign(request.options || {}, {
                            data: bytes.toHex(request.data),
                        });
                        return [4 /*yield*/, this._inner.web3.provider.transactions.create(txParams)];
                    case 1:
                        tx = _a.sent();
                        return [4 /*yield*/, this._inner.wallet.sign(tx)];
                    case 2:
                        rawTx = _a.sent();
                        return [4 /*yield*/, this.eth.sendRawTransaction(rawTx)];
                    case 3:
                        txHash = _a.sent();
                        return [4 /*yield*/, this.eth.getTransactionReceipt(txHash)];
                    case 4:
                        receipt = _a.sent();
                        tries = 0;
                        _a.label = 5;
                    case 5:
                        if (!(!receipt && tries < 5)) return [3 /*break*/, 8];
                        return [4 /*yield*/, sleep(1000)];
                    case 6:
                        _a.sent();
                        return [4 /*yield*/, this.eth.getTransactionReceipt(txHash)];
                    case 7:
                        receipt = _a.sent();
                        tries += 1;
                        return [3 /*break*/, 5];
                    case 8:
                        if (!receipt) {
                            throw new RpcFailure('could not fetch the transaction receipt');
                        }
                        if (receipt.status !== '0x1') {
                            throw new TransactionReverted(receipt, "transaction reverted: " + JSON.stringify(receipt, null, 2));
                        }
                        return [2 /*return*/, {
                                address: bytes.parseHex(receipt.contractAddress),
                            }];
                }
            });
        });
    };
    Web3Gateway.prototype.rpc = function (request) {
        return __awaiter(this, void 0, void 0, function () {
            var txParams, tx, rawTx, executionPayload, error;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!this._inner.wallet) {
                            throw new Web3GatewayError('The Web3Gateway must have a Wallet to execute an rpc');
                        }
                        txParams = Object.assign(request.options || {}, {
                            data: bytes.toHex(request.data),
                            to: bytes.toHex(request.address),
                        });
                        return [4 /*yield*/, this._inner.web3.provider.transactions.create(txParams)];
                    case 1:
                        tx = _a.sent();
                        return [4 /*yield*/, this._inner.wallet.sign(tx)];
                    case 2:
                        rawTx = _a.sent();
                        return [4 /*yield*/, this.oasis.invoke(rawTx)];
                    case 3:
                        executionPayload = _a.sent();
                        error = undefined;
                        // If the transaction reverted, throw an Error with the message given from
                        // the runtime.
                        if (executionPayload.status === '0x0') {
                            error = bytes.parseHex(executionPayload.output);
                        }
                        return [2 /*return*/, {
                                output: executionPayload.output,
                                error: error,
                            }];
                }
            });
        });
    };
    Web3Gateway.prototype.subscribe = function (request) {
        return this.web3Subscribe(request.event, [
            'logs',
            {
                address: bytes.toHex(request.filter.address),
                topics: request.filter.topics,
            },
        ]);
    };
    Web3Gateway.prototype.web3Subscribe = function (eventName, params) {
        var _a;
        var _this = this;
        var events = new EventEmitter();
        (_a = this.eth).subscribe.apply(_a, params).then(function (sub) {
            // Set this mapping to allow clients to `unsubscribe` with an event
            // name, instead of an id.
            _this._inner.subscriptionIds.set(eventName, sub.id);
            // Remap web3 `data` event to the given event name.
            sub.on('data', function (event) {
                events.emit(eventName, event);
            });
        })
            .catch(console.error);
        return events;
    };
    Web3Gateway.prototype.unsubscribe = function (request) {
        return __awaiter(this, void 0, void 0, function () {
            var id;
            return __generator(this, function (_a) {
                id = this._inner.subscriptionIds.get(request.event);
                if (!id) {
                    return [2 /*return*/];
                }
                this._inner.subscriptionIds.delete(request.event);
                return [2 /*return*/, this.eth.unsubscribe(id)];
            });
        });
    };
    Web3Gateway.prototype.publicKey = function (request) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.oasis.getPublicKey(bytes.toHex(request.address))];
                    case 1:
                        response = _a.sent();
                        // TODO: signature validation. https://github.com/oasislabs/oasis-client/issues/39
                        return [2 /*return*/, {
                                publicKey: bytes.parseHex(response.public_key),
                            }];
                }
            });
        });
    };
    Web3Gateway.prototype.disconnect = function () {
        this._inner.web3.provider.ws.disconnect();
    };
    Web3Gateway.prototype.getCode = function (request) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.eth.getCode(bytes.toHex(request.address), 'latest')];
                    case 1:
                        response = _a.sent();
                        // Note: the gateway returns '0x' for all addresses without code.
                        return [2 /*return*/, {
                                code: response === '0x' ? null : bytes.parseHex(response),
                            }];
                }
            });
        });
    };
    // todo: https://github.com/oasislabs/oasis.js/issues/25
    Web3Gateway.prototype.connectionState = function () {
        return this._inner.web3.provider.ws.connectionState;
    };
    Web3Gateway.prototype.hasSigner = function () {
        return true;
    };
    return Web3Gateway;
}());
export default Web3Gateway;
//# sourceMappingURL=gateway.js.map