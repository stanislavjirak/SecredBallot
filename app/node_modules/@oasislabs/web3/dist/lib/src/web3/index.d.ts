import Web3Provider from './provider';
/**
 * Web3 JSON RPC implementation.
 *
 * Spec: https://github.com/ethereum/wiki/wiki/JSON-RPC
 *
 * Supported namespaces:
 *
 * - `eth`
 * - `oasis`
 * - `net`
 *
 * Note that the Web3 object merely exposes the raw underlying RPC methods.
 * This means that the responses will be the raw results given back from the
 * rpc server. However, there is one exception: subscriptions, which are not
 * formally a part of the web3 JSON rpc spec. Here, subscriptions created
 * via Web3.eth.subscribe will return an event emitter that can be used to
 * listen for `data` events.
 */
export declare class Web3 {
    readonly provider: Web3Provider;
    /**
     * `eth_*` web3 rpc methods.
     */
    eth: Web3Namespace;
    /**
     * `oasis_*` web3 rpc methods.
     */
    oasis: Web3Namespace;
    /**
     * `net_*` web3 rpc methods.
     */
    net: Web3Namespace;
    constructor(provider: Web3Provider);
    /**
     * @returns an object wth all the web3 rpc methods attached.
     *
     * TODO: validate inputs to the web3 rpc methods. For now, just let the
     *       remote gateway do the rejecting if invalid args are provided.
     */
    private generateWeb3Rpcs;
}
/**
 * Represents a valid web3 namespace.
 */
export declare type Web3Namespace = any;
export { Web3Provider };
