var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
import Web3Provider from './provider';
import WEB3_RPC_METHODS from './methods';
/**
 * Web3 JSON RPC implementation.
 *
 * Spec: https://github.com/ethereum/wiki/wiki/JSON-RPC
 *
 * Supported namespaces:
 *
 * - `eth`
 * - `oasis`
 * - `net`
 *
 * Note that the Web3 object merely exposes the raw underlying RPC methods.
 * This means that the responses will be the raw results given back from the
 * rpc server. However, there is one exception: subscriptions, which are not
 * formally a part of the web3 JSON rpc spec. Here, subscriptions created
 * via Web3.eth.subscribe will return an event emitter that can be used to
 * listen for `data` events.
 */
var Web3 = /** @class */ (function () {
    function Web3(provider) {
        this.provider = provider;
        var rpcs = this.generateWeb3Rpcs();
        this.eth = rpcs.eth;
        this.oasis = rpcs.oasis;
        this.net = rpcs.net;
    }
    /**
     * @returns an object wth all the web3 rpc methods attached.
     *
     * TODO: validate inputs to the web3 rpc methods. For now, just let the
     *       remote gateway do the rejecting if invalid args are provided.
     */
    Web3.prototype.generateWeb3Rpcs = function () {
        var _this = this;
        var generatedRpcs = { eth: {}, oasis: {}, net: {} };
        WEB3_RPC_METHODS.forEach(function (rpc) {
            var _a = rpc.method.split('_'), namespace = _a[0], method = _a[1];
            generatedRpcs[namespace][method] = function () {
                var params = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    params[_i] = arguments[_i];
                }
                return __awaiter(_this, void 0, void 0, function () {
                    var rpcMethod;
                    return __generator(this, function (_a) {
                        rpcMethod = namespace + "_" + method;
                        return [2 /*return*/, this.provider.send(rpcMethod, params)];
                    });
                });
            };
        });
        return generatedRpcs;
    };
    return Web3;
}());
export { Web3 };
export { Web3Provider };
//# sourceMappingURL=index.js.map