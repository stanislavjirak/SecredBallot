import { EventEmitter } from 'eventemitter3';
import { JsonRpcWebSocket } from '../websocket';
import { Wallet } from '../gateway';
import { TransactionFactory } from '../transaction';
/**
 * Web3Provider is the brains behind the `Web3` class' implementation, exposing
 * the `send` method, that is responsible for making the JSON RPC request to
 * the Web3 gateway server. It acts as a sort of middle man to ensure requests
 * are handled properly and signed by a wallet when needed. Specficially, it
 *
 * - Transforms rpc requests to their desired behavior, e.g., converts
 *   eth_sendTransaction to eth_sendRawTransaction.
 * - Maintains subscription state.
 * - Executes the JSON RPC request and returns the response
 *
 * For making web3 calls, one should use the `Web3` class.
 *
 */
export default class Web3Provider {
    private url;
    private wallet?;
    readonly ws: JsonRpcWebSocket;
    readonly transactions?: TransactionFactory;
    private subscriptions;
    constructor(url: string, wallet?: Wallet | undefined);
    private static makeWs;
    /**
     * Assumes all params are properly formatted at this point.
     */
    send(method: string, params: any[]): Promise<any>;
    private _send;
    /**
     * Transforms all calls to eth_sendTransaction to signed calls to
     * eth_sendRawTransaction.
     */
    private eth_sendTransaction;
    private handleResponse;
    private subscribeResponse;
}
export declare class Subscription extends EventEmitter {
    readonly id: string;
    /**
     * @param `id` is the subscription id given by the remote web3 gateway.
     */
    constructor(id: string);
    unsubscribe(): void;
    subscribe(): void;
}
