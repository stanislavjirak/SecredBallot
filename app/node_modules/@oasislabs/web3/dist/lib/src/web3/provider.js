var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
import { EventEmitter } from 'eventemitter3';
import { JsonRpcWebSocket, } from '../websocket';
import { Subscriptions } from '../subscriptions';
import { Web3Error } from '../error';
import { TransactionFactory } from '../transaction';
/**
 * Web3Provider is the brains behind the `Web3` class' implementation, exposing
 * the `send` method, that is responsible for making the JSON RPC request to
 * the Web3 gateway server. It acts as a sort of middle man to ensure requests
 * are handled properly and signed by a wallet when needed. Specficially, it
 *
 * - Transforms rpc requests to their desired behavior, e.g., converts
 *   eth_sendTransaction to eth_sendRawTransaction.
 * - Maintains subscription state.
 * - Executes the JSON RPC request and returns the response
 *
 * For making web3 calls, one should use the `Web3` class.
 *
 */
var Web3Provider = /** @class */ (function () {
    function Web3Provider(url, wallet) {
        this.url = url;
        this.wallet = wallet;
        this.subscriptions = new Subscriptions();
        this.ws = Web3Provider.makeWs(url, this.subscriptions);
        if (wallet) {
            this.transactions = new TransactionFactory(wallet.address, this.ws);
        }
    }
    Web3Provider.makeWs = function (url, subscriptions) {
        return new JsonRpcWebSocket(url, [subscriptions]);
    };
    /**
     * Assumes all params are properly formatted at this point.
     */
    Web3Provider.prototype.send = function (method, params) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this._send(method, params)];
                    case 1:
                        response = _a.sent();
                        if (response.result === undefined) {
                            throw new Web3Error(method, params, "error executing " + method + ": " + JSON.stringify(response));
                        }
                        return [2 /*return*/, this.handleResponse(method, params, response.result)];
                }
            });
        });
    };
    Web3Provider.prototype._send = function (method, params) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                if (method === 'eth_sendTransaction') {
                    return [2 /*return*/, this.eth_sendTransaction(method, params)];
                }
                else if (method === 'eth_unsubscribe') {
                    this.subscriptions.remove(params[0]);
                    return [2 /*return*/, this.ws.request({ method: method, params: params })];
                }
                else {
                    return [2 /*return*/, this.ws.request({ method: method, params: params })];
                }
                return [2 /*return*/];
            });
        });
    };
    /**
     * Transforms all calls to eth_sendTransaction to signed calls to
     * eth_sendRawTransaction.
     */
    Web3Provider.prototype.eth_sendTransaction = function (method, params) {
        return __awaiter(this, void 0, void 0, function () {
            var tx, rawTx;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!this.wallet) {
                            throw new Web3Error(method, params, "must have a wallet to execute eth_sendTransaction");
                        }
                        return [4 /*yield*/, this.transactions.create(params[0])];
                    case 1:
                        tx = _a.sent();
                        return [4 /*yield*/, this.wallet.sign(tx)];
                    case 2:
                        rawTx = _a.sent();
                        return [2 /*return*/, this.ws.request({
                                method: 'eth_sendRawTransaction',
                                params: [rawTx],
                            })];
                }
            });
        });
    };
    Web3Provider.prototype.handleResponse = function (rpcMethod, params, response) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                if (rpcMethod === 'eth_subscribe') {
                    return [2 /*return*/, this.subscribeResponse(response)];
                }
                else {
                    return [2 /*return*/, response];
                }
                return [2 /*return*/];
            });
        });
    };
    Web3Provider.prototype.subscribeResponse = function (subscriptionId) {
        var subscription = new Subscription(subscriptionId);
        this.subscriptions.add(subscriptionId, function (event) {
            subscription.emit('data', event.params.result);
        });
        return subscription;
    };
    return Web3Provider;
}());
export default Web3Provider;
var Subscription = /** @class */ (function (_super) {
    __extends(Subscription, _super);
    /**
     * @param `id` is the subscription id given by the remote web3 gateway.
     */
    function Subscription(id) {
        var _this = _super.call(this) || this;
        _this.id = id;
        return _this;
    }
    Subscription.prototype.unsubscribe = function () {
        throw new Error('unsubscribe is not implemented');
    };
    Subscription.prototype.subscribe = function () {
        throw new Error('subscribe is not implemented');
    };
    return Subscription;
}(EventEmitter));
export { Subscription };
//# sourceMappingURL=provider.js.map