var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var OASIS_CHAIN_ID = 42261;
var TransactionFactory = /** @class */ (function () {
    function TransactionFactory(address, rpc) {
        this.address = address;
        this.rpc = rpc;
    }
    TransactionFactory.prototype.create = function (tx) {
        return __awaiter(this, void 0, void 0, function () {
            var promises;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        // Clone the options so that we don't mutate the array given,
                        // which might be re-used by the front-end client.
                        tx = JSON.parse(JSON.stringify(tx));
                        if (!tx.value) {
                            tx.value = '0x00';
                        }
                        promises = [];
                        if (!tx.gasLimit) {
                            promises.push(this.estimateGas(tx));
                        }
                        if (!tx.nonce) {
                            promises.push(this.nonce());
                        }
                        return [4 /*yield*/, Promise.all(promises)];
                    case 1:
                        (_a.sent()).forEach(function (r) {
                            tx[r.key] = r.value;
                        });
                        if (!tx.gasPrice) {
                            tx.gasPrice = '0x3b9aca00';
                        }
                        tx.chainId = OASIS_CHAIN_ID;
                        return [2 /*return*/, tx];
                }
            });
        });
    };
    TransactionFactory.prototype.estimateGas = function (tx) {
        return __awaiter(this, void 0, void 0, function () {
            var _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _a = {
                            key: 'gasLimit'
                        };
                        return [4 /*yield*/, this.rpc.request({
                                method: 'eth_estimateGas',
                                params: [tx],
                            })];
                    case 1: return [2 /*return*/, (_a.value = (_b.sent()).result,
                            _a)];
                }
            });
        });
    };
    TransactionFactory.prototype.nonce = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _a = {
                            key: 'nonce'
                        };
                        return [4 /*yield*/, this.rpc.request({
                                method: 'eth_getTransactionCount',
                                params: [this.address, 'latest'],
                            })];
                    case 1: return [2 /*return*/, (_a.value = (_b.sent()).result,
                            _a)];
                }
            });
        });
    };
    return TransactionFactory;
}());
export { TransactionFactory };
//# sourceMappingURL=transaction.js.map