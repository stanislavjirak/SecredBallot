export declare class JsonRpcWebSocket implements JsonRpc {
    private url;
    /**
     * responses implements a request-response pattern for `send` requests.
     */
    private responses;
    /**
     * Middleware to plug into the websocket connection. Processes ws messages
     * prior to the default handler defined here.
     */
    private middleware;
    /**
     * JSON rpc request id auto counter.
     */
    private requestId;
    /**
     * lifecycle emits events pertaining to the lifecycle of the websocket,
     * e.g., when it opens or closes.
     */
    private lifecycle;
    /**
     * WebSocket through which all requests are sent.
     */
    private websocket;
    /**
     * Creates websocket connections.
     */
    private websocketFactory;
    /**
     * This counts how many websocket errors we've encountered without an `open` event.
     */
    private consecutiveErrors;
    /**
     * True iff we want to close the websocket immediately when it is opened.
     * This is set when we are asked to close the websocket in the middle of
     * establishing a connection, which we can't do; hence this hack.
     */
    private closeOnOpen;
    /**
     * connectionState emits `trouble` and `ok` events.
     */
    connectionState: any;
    /**
     * @param url is the websocket url to connect to.
     * @param middleware is the middleware to use to process websocket messages.
     * @param wsFactory? is given as an optional WebSocketFactory implementation
     *        (for testing).
     */
    constructor(url: string, middleware: Middleware[], wsFactory?: WebSocketFactory);
    private addEventListeners;
    private removeEventListeners;
    private message;
    private runMiddleware;
    private handler;
    private open;
    private error;
    private close;
    connect(): void;
    disconnect(): void;
    request(request: JsonRpcRequest): Promise<JsonRpcResponse>;
    private nextId;
}
export interface Middleware {
    handle(message: any): any | undefined;
}
export interface JsonRpc {
    request(request: JsonRpcRequest): Promise<JsonRpcResponse>;
}
export declare type JsonRpcRequest = {
    method: string;
    params: any[];
};
export declare type JsonRpcResponse = {
    result?: any;
};
export interface WebSocketFactory {
    make(url: string): WebSocket;
}
