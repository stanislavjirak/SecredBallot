{"map":"{\"version\":3,\"file\":\"header.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../src/deploy/header.ts\"],\"names\":[],\"mappings\":\"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\"}","code":"import { __extends } from \"tslib\";\r\nimport { bytes } from '@oasislabs/common';\r\nvar DeployHeaderError = /** @class */ (function (_super) {\r\n    __extends(DeployHeaderError, _super);\r\n    function DeployHeaderError() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    return DeployHeaderError;\r\n}(Error));\r\nexport { DeployHeaderError };\r\n// TODO: change all apis here to take Uint8Arrays as input/output instead\r\n//       of hex strings.\r\nvar DeployHeader = /** @class */ (function () {\r\n    /**\r\n     * @param {Number} version is the header version number.\r\n     * @param {Object} is the header body with two fields, expiry (Number)\r\n     *        and confidential (boolean).\r\n     */\r\n    function DeployHeader(version, body) {\r\n        this.version = version;\r\n        this.body = body;\r\n    }\r\n    DeployHeader.prototype.data = function () {\r\n        var bodyBytes = DeployHeaderWriter.body(this.body);\r\n        return new Uint8Array(bytes.concat([\r\n            DeployHeader.prefix(),\r\n            DeployHeaderWriter.shortToBytes(this.version),\r\n            DeployHeaderWriter.shortToBytes(bodyBytes.length),\r\n            bodyBytes,\r\n        ]));\r\n    };\r\n    /**\r\n     * @param   {Object} headerBody is the header object to encode.\r\n     * @param   {Uint8Array} deploycode is the bytecode to which we want to prefix the header.\r\n     * @returns The deploycode with the header prefixed as the encoded wire format, i.e.,\r\n     *          b'\\0sis' || version (2 bytes big endian) || length (2 bytes big endian) || json-header.\r\n     *          Overrides any header fields that may already exist in the deploycode.\r\n     */\r\n    DeployHeader.deployCode = function (headerBody, deploycode) {\r\n        DeployHeader.deployCodePreconditions(headerBody, deploycode);\r\n        if (Object.keys(headerBody).length === 0) {\r\n            return deploycode; // No header, so do nothing.\r\n        }\r\n        // Read the existing header, if it exists.\r\n        var currentHeader = DeployHeaderReader.header(deploycode);\r\n        // Bytecode to create the contract without the serialized deploy header prepended.\r\n        var initcode;\r\n        // No header so just make a new one. The initcode is the given deploycode.\r\n        if (currentHeader === null) {\r\n            currentHeader = new DeployHeader(DeployHeader.currentVersion(), {});\r\n            initcode = deploycode;\r\n        }\r\n        // Extract the initcode from the deploy code.\r\n        else {\r\n            initcode = DeployHeaderReader.initcode(deploycode);\r\n        }\r\n        if (headerBody) {\r\n            Object.assign(currentHeader.body, headerBody);\r\n        }\r\n        var headerData = currentHeader.data();\r\n        var code = new Uint8Array(headerData.length + initcode.length);\r\n        code.set(headerData);\r\n        code.set(initcode, headerData.length);\r\n        return code;\r\n    };\r\n    DeployHeader.deployCodePreconditions = function (headerBody, deploycode) {\r\n        if (!headerBody) {\r\n            throw new Error('No header given');\r\n        }\r\n        if (deploycode.length === 0) {\r\n            throw new Error('Malformed deploycode');\r\n        }\r\n        if (!DeployHeader.isValidBody(headerBody)) {\r\n            throw new Error('Malformed deploycode or header');\r\n        }\r\n    };\r\n    /**\r\n     * @returns true iff the keys in the headerBody are part of the valid set.\r\n     */\r\n    DeployHeader.isValidBody = function (headerBody) {\r\n        var validKeys = ['expiry', 'confidential'];\r\n        var keys = Object.keys(headerBody);\r\n        for (var k = 0; k < keys.length; k += 1) {\r\n            if (!validKeys.includes(keys[k])) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    };\r\n    /**\r\n     * Returns the current version of the header.\r\n     */\r\n    DeployHeader.currentVersion = function () {\r\n        return 1;\r\n    };\r\n    DeployHeader.prefix = function () {\r\n        return bytes.encodeUtf8('\\0sis');\r\n    };\r\n    return DeployHeader;\r\n}());\r\nexport { DeployHeader };\r\n/**\r\n * A collection of utilities for parsing through deploycode including the Oasis contract\r\n * deploy header in the form of a hex string.\r\n */\r\nvar DeployHeaderReader = /** @class */ (function () {\r\n    function DeployHeaderReader() {\r\n    }\r\n    /**\r\n     * @param   {String} deploycode is the transaction data to deploy a contract as a hex string.\r\n     * @returns the contract deploy header prefixed to the deploycode, otherwise, null.\r\n     */\r\n    DeployHeaderReader.header = function (deploycode) {\r\n        if (!DeployHeaderReader.codeHasPrefixPrefix(deploycode)) {\r\n            return null;\r\n        }\r\n        var version = DeployHeaderReader.version(deploycode);\r\n        var body = DeployHeaderReader.body(deploycode);\r\n        if (!DeployHeader.isValidBody(body)) {\r\n            throw Error(\"Invalid body \" + JSON.stringify(body));\r\n        }\r\n        return new DeployHeader(version, body);\r\n    };\r\n    /**\r\n     * @param {Uint8Array} deploycode is a hex string of the header || initcode.\r\n     */\r\n    DeployHeaderReader.body = function (deploycode) {\r\n        if (!DeployHeaderReader.codeHasPrefixPrefix(deploycode)) {\r\n            throw new DeployHeaderError('code must have the header prefiix');\r\n        }\r\n        var length = DeployHeaderReader.size(deploycode);\r\n        var serializedBody = deploycode.subarray(DeployHeaderReader.bodyStart(), DeployHeaderReader.bodyStart() + length);\r\n        return JSON.parse(bytes.decodeUtf8(serializedBody));\r\n    };\r\n    /**\r\n     * @param {String} deploycode is a hex string of the header || initcode.\r\n     */\r\n    DeployHeaderReader.size = function (deploycode) {\r\n        if (!DeployHeaderReader.codeHasPrefixPrefix(deploycode)) {\r\n            throw new DeployHeaderError('code must have the header prefix');\r\n        }\r\n        var start = DeployHeaderReader.sizeStart();\r\n        var lengthBytes = deploycode.subarray(start, start + DeployHeaderReader.sizeLength());\r\n        return DeployHeaderReader.shortFromBytes(lengthBytes);\r\n    };\r\n    /**\r\n     * @param {String} deploycode is a hex string of the header || initcode.\r\n     */\r\n    DeployHeaderReader.version = function (deploycode) {\r\n        if (!DeployHeaderReader.codeHasPrefixPrefix(deploycode)) {\r\n            throw new DeployHeaderError('code must have the header prefix');\r\n        }\r\n        var start = DeployHeaderReader.versionStart();\r\n        var versionBytes = deploycode.subarray(start, start + DeployHeaderReader.versionLength());\r\n        return DeployHeaderReader.shortFromBytes(versionBytes);\r\n    };\r\n    /**\r\n     * @param {String} deploycode is a hex string of the header || initcode.\r\n     */\r\n    DeployHeaderReader.initcode = function (deploycode) {\r\n        if (!DeployHeaderReader.codeHasPrefixPrefix(deploycode)) {\r\n            throw new DeployHeaderError('code must have the header prefix');\r\n        }\r\n        return deploycode.subarray(DeployHeaderReader.initcodeStart(deploycode));\r\n    };\r\n    DeployHeaderReader.initcodeStart = function (deploycode) {\r\n        if (!DeployHeaderReader.codeHasPrefixPrefix(deploycode)) {\r\n            throw new DeployHeaderError('code must have the header prefix');\r\n        }\r\n        return DeployHeaderReader.bodyStart() + DeployHeaderReader.size(deploycode);\r\n    };\r\n    /**\r\n     * @param {Uint8Array} the 2-byte representation of the input.\r\n     * @returns {Number} an unsigned 16-bit number.\r\n     */\r\n    DeployHeaderReader.shortFromBytes = function (arr) {\r\n        return new DataView(arr.buffer).getUint16(arr.byteOffset, false /* little endian */);\r\n    };\r\n    DeployHeaderReader.codeHasPrefixPrefix = function (code) {\r\n        var prefix = DeployHeader.prefix();\r\n        for (var i = 0; i < prefix.length; i++) {\r\n            if (code[i] !== prefix[i]) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    };\r\n    /**\r\n     * @returns the hex string index of the start section.\r\n     */\r\n    DeployHeaderReader.versionStart = function () {\r\n        return DeployHeader.prefix().length;\r\n    };\r\n    /**\r\n     * @returns the length of the version in bytes.\r\n     */\r\n    DeployHeaderReader.versionLength = function () {\r\n        return 2;\r\n    };\r\n    /**\r\n     * @returns the index of the starting point of the size section.\r\n     */\r\n    DeployHeaderReader.sizeStart = function () {\r\n        return (DeployHeaderReader.versionStart() + DeployHeaderReader.versionLength());\r\n    };\r\n    /**\r\n     * @returns the length of the body size in bytes.\r\n     */\r\n    DeployHeaderReader.sizeLength = function () {\r\n        return 2;\r\n    };\r\n    /**\r\n     * @returns the hex string index of the body section.\r\n     */\r\n    DeployHeaderReader.bodyStart = function () {\r\n        return DeployHeaderReader.sizeStart() + DeployHeaderReader.sizeLength();\r\n    };\r\n    return DeployHeaderReader;\r\n}());\r\nexport { DeployHeaderReader };\r\nvar DeployHeaderWriter = /** @class */ (function () {\r\n    function DeployHeaderWriter() {\r\n    }\r\n    DeployHeaderWriter.body = function (body) {\r\n        return bytes.encodeUtf8(JSON.stringify(body));\r\n    };\r\n    /**\r\n     * @param {Number} an unsigned 16-bit number.\r\n     * @returns {Uint8Array} the 2-byte representation of the input.\r\n     */\r\n    DeployHeaderWriter.shortToBytes = function (num) {\r\n        var arr = new Uint8Array(2);\r\n        new DataView(arr.buffer).setUint16(0 /* offset */, num, false /* little endian */);\r\n        return arr;\r\n    };\r\n    return DeployHeaderWriter;\r\n}());\r\nexport { DeployHeaderWriter };\r\n// Alias.\r\nfunction parseFromCode(deploycode) {\r\n    var _deploycode = typeof deploycode === 'string' ? bytes.parseHex(deploycode) : deploycode;\r\n    return DeployHeaderReader.header(_deploycode);\r\n}\r\n// Convenience api export.\r\nexport var header = {\r\n    parseFromCode: parseFromCode,\r\n    deployCode: DeployHeader.deployCode,\r\n};\r\n//# sourceMappingURL=header.js.map","dts":{"name":"/Users/armaniferrante/Documents/code/src/github.com/oasislabs/tttt/oasis.js/packages/service/dist/lib/src/deploy/header.d.ts","writeByteOrderMark":false,"text":"export declare type DeployHeaderOptions = {\r\n    expiry?: number;\r\n    confidential?: boolean;\r\n};\r\nexport declare class DeployHeaderError extends Error {\r\n}\r\nexport declare class DeployHeader {\r\n    version: number;\r\n    body: DeployHeaderOptions;\r\n    /**\r\n     * @param {Number} version is the header version number.\r\n     * @param {Object} is the header body with two fields, expiry (Number)\r\n     *        and confidential (boolean).\r\n     */\r\n    constructor(version: number, body: DeployHeaderOptions);\r\n    data(): Uint8Array;\r\n    /**\r\n     * @param   {Object} headerBody is the header object to encode.\r\n     * @param   {Uint8Array} deploycode is the bytecode to which we want to prefix the header.\r\n     * @returns The deploycode with the header prefixed as the encoded wire format, i.e.,\r\n     *          b'\\0sis' || version (2 bytes big endian) || length (2 bytes big endian) || json-header.\r\n     *          Overrides any header fields that may already exist in the deploycode.\r\n     */\r\n    static deployCode(headerBody: DeployHeaderOptions, deploycode: Uint8Array): Uint8Array;\r\n    private static deployCodePreconditions;\r\n    /**\r\n     * @returns true iff the keys in the headerBody are part of the valid set.\r\n     */\r\n    static isValidBody(headerBody: DeployHeaderOptions): boolean;\r\n    /**\r\n     * Returns the current version of the header.\r\n     */\r\n    static currentVersion(): number;\r\n    static prefix(): Uint8Array;\r\n}\r\n/**\r\n * A collection of utilities for parsing through deploycode including the Oasis contract\r\n * deploy header in the form of a hex string.\r\n */\r\nexport declare class DeployHeaderReader {\r\n    /**\r\n     * @param   {String} deploycode is the transaction data to deploy a contract as a hex string.\r\n     * @returns the contract deploy header prefixed to the deploycode, otherwise, null.\r\n     */\r\n    static header(deploycode: Uint8Array): DeployHeader | null;\r\n    /**\r\n     * @param {Uint8Array} deploycode is a hex string of the header || initcode.\r\n     */\r\n    static body(deploycode: Uint8Array): DeployHeaderOptions;\r\n    /**\r\n     * @param {String} deploycode is a hex string of the header || initcode.\r\n     */\r\n    static size(deploycode: Uint8Array): number;\r\n    /**\r\n     * @param {String} deploycode is a hex string of the header || initcode.\r\n     */\r\n    static version(deploycode: Uint8Array): number;\r\n    /**\r\n     * @param {String} deploycode is a hex string of the header || initcode.\r\n     */\r\n    static initcode(deploycode: Uint8Array): Uint8Array;\r\n    private static initcodeStart;\r\n    /**\r\n     * @param {Uint8Array} the 2-byte representation of the input.\r\n     * @returns {Number} an unsigned 16-bit number.\r\n     */\r\n    static shortFromBytes(arr: Uint8Array): number;\r\n    static codeHasPrefixPrefix(code: Uint8Array): boolean;\r\n    /**\r\n     * @returns the hex string index of the start section.\r\n     */\r\n    private static versionStart;\r\n    /**\r\n     * @returns the length of the version in bytes.\r\n     */\r\n    static versionLength(): number;\r\n    /**\r\n     * @returns the index of the starting point of the size section.\r\n     */\r\n    private static sizeStart;\r\n    /**\r\n     * @returns the length of the body size in bytes.\r\n     */\r\n    private static sizeLength;\r\n    /**\r\n     * @returns the hex string index of the body section.\r\n     */\r\n    private static bodyStart;\r\n}\r\nexport declare class DeployHeaderWriter {\r\n    static body(body: DeployHeaderOptions): Uint8Array;\r\n    /**\r\n     * @param {Number} an unsigned 16-bit number.\r\n     * @returns {Uint8Array} the 2-byte representation of the input.\r\n     */\r\n    static shortToBytes(num: number): Uint8Array;\r\n}\r\ndeclare function parseFromCode(deploycode: Uint8Array | string): DeployHeader | null;\r\nexport declare const header: {\r\n    parseFromCode: typeof parseFromCode;\r\n    deployCode: typeof DeployHeader.deployCode;\r\n};\r\nexport {};\r\n"}}
