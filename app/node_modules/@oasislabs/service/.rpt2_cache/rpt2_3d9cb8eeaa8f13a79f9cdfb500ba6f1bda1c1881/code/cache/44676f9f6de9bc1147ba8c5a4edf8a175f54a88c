{"map":"{\"version\":3,\"file\":\"service.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../src/service.ts\"],\"names\":[],\"mappings\":\"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\"}","code":"import { __awaiter, __generator } from \"tslib\";\r\nimport { EventEmitter } from 'eventemitter3';\r\nimport { LocalStorage, bytes } from '@oasislabs/common';\r\nimport { fromWasm } from './idl';\r\nimport { RpcFactory } from './rpc';\r\nimport { DeployHeaderReader } from './deploy/header';\r\nimport { defaultOasisGateway, } from './oasis-gateway';\r\nimport { ServiceError, NO_CODE_ERROR_MSG } from './error';\r\n/**\r\n * Service is the object representation of an Oasis rpc service.\r\n */\r\nvar Service = /** @class */ (function () {\r\n    /**\r\n     * The Service constructor to dynamically generate service objects from a\r\n     * given idl.\r\n     *\r\n     * @returns a service with all rpc methods attached to it.\r\n     *\r\n     * @param idl is the Idl definition generated for the Oasis service.\r\n     * @param address? is the address of the currently deployed service.\r\n     * @param options? are the options configuring the Service client.\r\n     */\r\n    function Service(idl, address, options) {\r\n        // Convert to Uint8Array.\r\n        var _address = typeof address === 'string' ? bytes.parseHex(address) : address;\r\n        // Fill in any options not provided by the arguments.\r\n        options = Service.setupOptions(options);\r\n        // Attach the rpcs onto the rpc interface so that we can generate dynamic\r\n        // rpc methods while keeping the compiler happy. Without this, we need\r\n        // to use a types file when using a service within TypeScript.\r\n        var _a = RpcFactory.build(idl, _address, options), rpc = _a[0], coder = _a[1];\r\n        this.rpc = rpc;\r\n        // Attach the rpcs directly onto the Service object so that we can have\r\n        // the nice service.myMethod() syntax in JavaScript.\r\n        Object.assign(this, rpc);\r\n        this._inner = {\r\n            idl: idl,\r\n            options: options,\r\n            coder: coder,\r\n            address: _address,\r\n            listeners: new EventEmitter(),\r\n            subscriptions: new Map(),\r\n        };\r\n    }\r\n    /**\r\n     * Constructs a service object from a given `address` by fetching the on-\r\n     * chain wasm and extracting the idl.\r\n     */\r\n    Service.at = function (address, options) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var _address, response, wasm, idl;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        _address = typeof address === 'string' ? bytes.parseHex(address) : address;\r\n                        options = Service.setupOptions(options);\r\n                        return [4 /*yield*/, options.gateway.getCode({ address: _address })];\r\n                    case 1:\r\n                        response = _a.sent();\r\n                        if (!response.code) {\r\n                            throw new ServiceError(_address, NO_CODE_ERROR_MSG(_address));\r\n                        }\r\n                        wasm = DeployHeaderReader.initcode(response.code);\r\n                        return [4 /*yield*/, fromWasm(wasm)];\r\n                    case 2:\r\n                        idl = _a.sent();\r\n                        return [2 /*return*/, new Service(idl, address, options)];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * setupOptions configures the options for the Service.\r\n     *\r\n     * @param   options is the options argument given to the constructor.\r\n     * @returns the options to be used for this service, filling in any\r\n     *          options left out by the given options.\r\n     */\r\n    Service.setupOptions = function (options) {\r\n        if (options === undefined) {\r\n            options = defaultOptions();\r\n        }\r\n        else {\r\n            // Remove all undefined fields so that Object.assign overwrites them.\r\n            Object.keys(options).forEach(function (key) {\r\n                if (options[key] === undefined) {\r\n                    delete options[key];\r\n                }\r\n            });\r\n            options = assignDefaultOptions(options);\r\n        }\r\n        return options;\r\n    };\r\n    /**\r\n     * addEventListener is the api to register for observing service events.\r\n     *\r\n     * @param event is the name of the event to listen to.\r\n     * @param callback is the callback to call when an event is emitted in the\r\n     *        case where listener options are provided as the second argument.\r\n     */\r\n    Service.prototype.addEventListener = function (event, callback) {\r\n        var _this = this;\r\n        // Register the listener. We allow many for a single event subscription.\r\n        this._inner.listeners.addListener(event, callback);\r\n        var subscription = this._inner.subscriptions.get(event);\r\n        if (subscription !== undefined) {\r\n            // The subscription is already setup so exit.\r\n            return;\r\n        }\r\n        this._inner.coder\r\n            .then(function (coder) {\r\n            // Create the subscription.\r\n            subscription = _this._inner.options.gateway.subscribe({\r\n                event: event,\r\n                filter: {\r\n                    address: _this._inner.address,\r\n                    topics: [coder.topic(event, _this._inner.idl)],\r\n                },\r\n            });\r\n            // Save the subscription so that we can remove it on demand.\r\n            _this._inner.subscriptions.set(event, subscription);\r\n            // Decode the gateway's response and return it to the listener.\r\n            subscription.addListener(event, function (e) { return __awaiter(_this, void 0, void 0, function () {\r\n                var decoded;\r\n                return __generator(this, function (_a) {\r\n                    switch (_a.label) {\r\n                        case 0: return [4 /*yield*/, coder.decodeSubscriptionEvent(e, this._inner.idl)];\r\n                        case 1:\r\n                            decoded = _a.sent();\r\n                            this._inner.listeners.emit(event, decoded);\r\n                            return [2 /*return*/];\r\n                    }\r\n                });\r\n            }); });\r\n        })\r\n            .catch(function (err) {\r\n            console.error(\"\" + err);\r\n        });\r\n    };\r\n    Service.prototype.removeEventListener = function (event, listener) {\r\n        var subscription = this._inner.subscriptions.get(event);\r\n        if (subscription === undefined) {\r\n            throw new ServiceError(this._inner.address, \"no subscriptions found for \" + event);\r\n        }\r\n        this._inner.listeners.removeListener(event, listener);\r\n        // Remove the subscription if no listeners remain.\r\n        if (this._inner.listeners.listeners(event).length === 0) {\r\n            this._inner.options.gateway.unsubscribe({ event: event });\r\n            this._inner.subscriptions.delete(event);\r\n        }\r\n    };\r\n    return Service;\r\n}());\r\nexport default Service;\r\nfunction assignDefaultOptions(options) {\r\n    if (!options.gateway) {\r\n        options.gateway = defaultOasisGateway();\r\n    }\r\n    if (!options.db) {\r\n        options.db = new LocalStorage();\r\n    }\r\n    return options;\r\n}\r\nfunction defaultOptions() {\r\n    return {\r\n        gateway: defaultOasisGateway(),\r\n        db: new LocalStorage(),\r\n    };\r\n}\r\n//# sourceMappingURL=service.js.map","dts":{"name":"/Users/armaniferrante/Documents/code/src/github.com/oasislabs/tttt/oasis.js/packages/service/dist/lib/src/service.d.ts","writeByteOrderMark":false,"text":"import { Db } from '@oasislabs/common';\r\nimport { Idl } from './idl';\r\nimport { Rpcs } from './rpc';\r\nimport { RpcCoder } from './coder';\r\nimport { OasisGateway } from './oasis-gateway';\r\n/**\r\n * Service is the object representation of an Oasis rpc service.\r\n */\r\nexport default class Service {\r\n    /**\r\n     * The generated rpcs for this service, defined by a given IDL.\r\n     */\r\n    rpc: Rpcs;\r\n    /**\r\n     * The inner variables required to implement the Service object. We reserve\r\n     * the `_inner` namespace so that service methods defined by an IDL don't\r\n     * override/clash with the internal variables. This is required so that we\r\n     * can support the convenient `service.myMethod()` syntax in JavaScript.\r\n     * It's expected no IDL used will have an _inner rpc method.\r\n     */\r\n    private _inner;\r\n    /**\r\n     * The Service constructor to dynamically generate service objects from a\r\n     * given idl.\r\n     *\r\n     * @returns a service with all rpc methods attached to it.\r\n     *\r\n     * @param idl is the Idl definition generated for the Oasis service.\r\n     * @param address? is the address of the currently deployed service.\r\n     * @param options? are the options configuring the Service client.\r\n     */\r\n    constructor(idl: Idl, address: Uint8Array | string, options?: ServiceOptions);\r\n    /**\r\n     * Constructs a service object from a given `address` by fetching the on-\r\n     * chain wasm and extracting the idl.\r\n     */\r\n    static at(address: Uint8Array | string, options?: ServiceOptions): Promise<Service>;\r\n    /**\r\n     * setupOptions configures the options for the Service.\r\n     *\r\n     * @param   options is the options argument given to the constructor.\r\n     * @returns the options to be used for this service, filling in any\r\n     *          options left out by the given options.\r\n     */\r\n    private static setupOptions;\r\n    /**\r\n     * addEventListener is the api to register for observing service events.\r\n     *\r\n     * @param event is the name of the event to listen to.\r\n     * @param callback is the callback to call when an event is emitted in the\r\n     *        case where listener options are provided as the second argument.\r\n     */\r\n    addEventListener(event: string, callback: Listener): void;\r\n    removeEventListener(event: string, listener: Listener): void;\r\n}\r\n/**\r\n * Listener is a callback method to respond to ServiceEvents.\r\n */\r\ndeclare type Listener = (event: ServiceEvent) => void;\r\n/**\r\n * An event emitted by  a service object.\r\n */\r\ndeclare type ServiceEvent = any;\r\nexport declare type ServiceOptions = {\r\n    gateway?: OasisGateway;\r\n    db?: Db;\r\n    coder?: RpcCoder;\r\n};\r\nexport {};\r\n"}}
