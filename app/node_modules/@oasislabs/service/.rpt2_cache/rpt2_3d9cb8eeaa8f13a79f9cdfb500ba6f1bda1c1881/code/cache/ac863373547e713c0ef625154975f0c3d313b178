{"map":"{\"version\":3,\"file\":\"rpc.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../src/rpc.ts\"],\"names\":[],\"mappings\":\"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\"}","code":"import { __awaiter, __generator } from \"tslib\";\r\nimport camelCase from 'camelcase';\r\nimport { KeyStore } from '@oasislabs/confidential';\r\nimport { bytes } from '@oasislabs/common';\r\nimport { RpcError, ServiceError, NO_CODE_ERROR_MSG } from './error';\r\nimport { IdlError } from './idl';\r\nimport ConfidentialCoder from './coder/confidential';\r\nimport { OasisCoder } from './coder/oasis';\r\nimport { header } from './deploy/header';\r\n/**\r\n * RpcFactory builds an Rpcs object for a given idl.\r\n */\r\nvar RpcFactory = /** @class */ (function () {\r\n    function RpcFactory() {\r\n    }\r\n    /**\r\n     * build dynamically generates RPC methods.\r\n     *\r\n     * @returns an object with all the RPC methods attached.\r\n     */\r\n    RpcFactory.build = function (idl, address, options) {\r\n        var functions = options.coder\r\n            ? options.coder.functions(idl)\r\n            : OasisCoder.plaintext().functions(idl);\r\n        var rpcCoder = new Promise(function (resolve) {\r\n            options.coder\r\n                ? resolve(options.coder)\r\n                : RpcFactory.discover(address, options).then(resolve);\r\n        });\r\n        var rpcs = {};\r\n        functions.forEach(function (fn) {\r\n            var rpcDef = RpcFactory.buildRpc(fn, address, options.gateway, rpcCoder);\r\n            rpcs[rpcDef.name] = rpcDef.rpc;\r\n        });\r\n        return [rpcs, rpcCoder];\r\n    };\r\n    RpcFactory.buildRpc = function (fn, address, gateway, rpcCoder) {\r\n        var _this = this;\r\n        if (fn.name === '_inner') {\r\n            throw new IdlError('the _inner name is reserved by the oasis-client');\r\n        }\r\n        var name = RpcFactory.rpcName(fn.name);\r\n        var rpc = function () {\r\n            var args = [];\r\n            for (var _i = 0; _i < arguments.length; _i++) {\r\n                args[_i] = arguments[_i];\r\n            }\r\n            return __awaiter(_this, void 0, void 0, function () {\r\n                var coder, _a, rpcArgs, rpcOptions, txData, response, errorStr;\r\n                return __generator(this, function (_b) {\r\n                    switch (_b.label) {\r\n                        case 0: return [4 /*yield*/, rpcCoder];\r\n                        case 1:\r\n                            coder = _b.sent();\r\n                            _a = RpcFactory.parseOptions(fn, args, gateway, coder), rpcArgs = _a[0], rpcOptions = _a[1];\r\n                            return [4 /*yield*/, coder.encode(fn, rpcArgs, rpcOptions)];\r\n                        case 2:\r\n                            txData = _b.sent();\r\n                            return [4 /*yield*/, gateway.rpc({\r\n                                    data: txData,\r\n                                    address: address,\r\n                                    options: rpcOptions,\r\n                                })];\r\n                        case 3:\r\n                            response = _b.sent();\r\n                            if (!response.error) return [3 /*break*/, 5];\r\n                            return [4 /*yield*/, coder.decodeError(response.error)];\r\n                        case 4:\r\n                            errorStr = _b.sent();\r\n                            throw new Error(errorStr);\r\n                        case 5: return [2 /*return*/, coder.decode(fn, bytes.parseHex(response.output))];\r\n                    }\r\n                });\r\n            });\r\n        };\r\n        return {\r\n            rpc: rpc,\r\n            name: name,\r\n        };\r\n    };\r\n    /**\r\n     * Transforms the given `idlName` into a properly formatted\r\n     * snakeCase rpc name to be exposed on the service client.\r\n     */\r\n    RpcFactory.rpcName = function (idlName) {\r\n        return camelCase(idlName);\r\n    };\r\n    RpcFactory.parseOptions = function (fn, args, gateway, rpcCoder) {\r\n        var _a = RpcFactory.splitArgsAndOptions(fn, args), rpcArgs = _a[0], rpcOptions = _a[1];\r\n        RpcFactory.validateRpcOptions(gateway, rpcCoder, rpcArgs, rpcOptions);\r\n        return [rpcArgs, rpcOptions];\r\n    };\r\n    RpcFactory.splitArgsAndOptions = function (fn, args) {\r\n        var options = undefined;\r\n        var inputLen = fn.inputs ? fn.inputs.length : 0;\r\n        if (args.length > inputLen) {\r\n            if (args.length !== inputLen + 1) {\r\n                throw new Error('provided too many arguments ${args}');\r\n            }\r\n            var arg = args.pop();\r\n            options = arg ? JSON.parse(JSON.stringify(arg)) : undefined;\r\n        }\r\n        return [args, options];\r\n    };\r\n    /**\r\n     * Asserts the given `rpcOptions` are well formed.\r\n     * When signing transactions in the client, confidential services\r\n     * must have the gasLimit specified by the user, since estimateGas\r\n     * is not available. When signing is done by a remote gateway, e.g.,\r\n     * the developer-gateway, this requirement is not enforced.\r\n     */\r\n    RpcFactory.validateRpcOptions = function (gateway, rpcCoder, rpcArgs, rpcOptions) {\r\n        if (gateway.hasSigner()) {\r\n            if (rpcCoder instanceof ConfidentialCoder) {\r\n                if (!rpcOptions || !rpcOptions.gasLimit) {\r\n                    throw new RpcError(rpcArgs, rpcOptions, \"gasLimit must be specified when signing a transaction to a confidential service\");\r\n                }\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * discover finds out if the contract at `address` is confidential.\r\n     *\r\n     * @returns the OasisCoder to use based upon whether it's confidential.\r\n     */\r\n    RpcFactory.discover = function (address, options) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var response, deployHeader, keyStore, serviceKey, myKeyPair;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4 /*yield*/, options.gateway.getCode({ address: address })];\r\n                    case 1:\r\n                        response = _a.sent();\r\n                        if (!response.code) {\r\n                            throw new ServiceError(address, NO_CODE_ERROR_MSG(address));\r\n                        }\r\n                        deployHeader = header.parseFromCode(response.code);\r\n                        if (!deployHeader || !deployHeader.body.confidential) {\r\n                            return [2 /*return*/, OasisCoder.plaintext()];\r\n                        }\r\n                        keyStore = new KeyStore(options.db, options.gateway);\r\n                        return [4 /*yield*/, keyStore.publicKey(address)];\r\n                    case 2:\r\n                        serviceKey = _a.sent();\r\n                        myKeyPair = keyStore.localKeys();\r\n                        return [2 /*return*/, OasisCoder.confidential({\r\n                                peerPublicKey: serviceKey,\r\n                                publicKey: myKeyPair.publicKey,\r\n                                privateKey: myKeyPair.privateKey,\r\n                            })];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    return RpcFactory;\r\n}());\r\nexport { RpcFactory };\r\n//# sourceMappingURL=rpc.js.map","dts":{"name":"/Users/armaniferrante/Documents/code/src/github.com/oasislabs/tttt/oasis.js/packages/service/dist/lib/src/rpc.d.ts","writeByteOrderMark":false,"text":"import { Idl } from './idl';\r\nimport { ServiceOptions } from './service';\r\nimport { RpcCoder } from './coder';\r\n/**\r\n * Rpcs is a dynamically generated object with rpc methods attached.\r\n */\r\nexport interface Rpcs {\r\n    [key: string]: Rpc;\r\n}\r\n/**\r\n * Rpc is a single rpc method.\r\n */\r\nexport declare type Rpc = (...args: any[]) => Promise<any>;\r\n/**\r\n * RpcFactory builds an Rpcs object for a given idl.\r\n */\r\nexport declare class RpcFactory {\r\n    /**\r\n     * build dynamically generates RPC methods.\r\n     *\r\n     * @returns an object with all the RPC methods attached.\r\n     */\r\n    static build(idl: Idl, address: Uint8Array, options: ServiceOptions): [Rpcs, Promise<RpcCoder>];\r\n    private static buildRpc;\r\n    /**\r\n     * Transforms the given `idlName` into a properly formatted\r\n     * snakeCase rpc name to be exposed on the service client.\r\n     */\r\n    private static rpcName;\r\n    private static parseOptions;\r\n    private static splitArgsAndOptions;\r\n    /**\r\n     * Asserts the given `rpcOptions` are well formed.\r\n     * When signing transactions in the client, confidential services\r\n     * must have the gasLimit specified by the user, since estimateGas\r\n     * is not available. When signing is done by a remote gateway, e.g.,\r\n     * the developer-gateway, this requirement is not enforced.\r\n     */\r\n    private static validateRpcOptions;\r\n    /**\r\n     * discover finds out if the contract at `address` is confidential.\r\n     *\r\n     * @returns the OasisCoder to use based upon whether it's confidential.\r\n     */\r\n    private static discover;\r\n}\r\n"}}
