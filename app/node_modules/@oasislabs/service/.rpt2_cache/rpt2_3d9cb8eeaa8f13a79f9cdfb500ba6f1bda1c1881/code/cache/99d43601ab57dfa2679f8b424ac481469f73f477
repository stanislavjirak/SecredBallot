{"map":"{\"version\":3,\"file\":\"oasis-gateway.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../src/oasis-gateway.ts\"],\"names\":[],\"mappings\":\"AAqFA,MAAM,CAAC,IAAM,cAAc,GAAG,cAAc,CAAC;AAE7C;;;GAGG;AACH,IAAI,eAAe,GAA6B,SAAS,CAAC;AAE1D;;;GAGG;AACH,MAAM,UAAU,UAAU,CAAC,EAAgB;IACzC,eAAe,GAAG,EAAE,CAAC;AACvB,CAAC;AAED,MAAM,UAAU,mBAAmB;IACjC,IAAI,CAAC,eAAe,EAAE;QACpB,MAAM,IAAI,KAAK,CAAC,gDAAgD,CAAC,CAAC;KACnE;IACD,OAAO,eAAe,CAAC;AACzB,CAAC\"}","code":"export var SubscribeTopic = 'subscription';\r\n/**\r\n * The default gateway to use if no gateway is provided to the service.\r\n * This *must* be set before using a service.\r\n */\r\nvar _defaultGateway = undefined;\r\n/**\r\n * setGateway sets the default oasis gateway so that all services use it\r\n * unless explicitly overridden upon construction of the service.\r\n */\r\nexport function setGateway(gw) {\r\n    _defaultGateway = gw;\r\n}\r\nexport function defaultOasisGateway() {\r\n    if (!_defaultGateway) {\r\n        throw new Error('the client is not connected to an OasisGateway');\r\n    }\r\n    return _defaultGateway;\r\n}\r\n//# sourceMappingURL=oasis-gateway.js.map","dts":{"name":"/Users/armaniferrante/Documents/code/src/github.com/oasislabs/tttt/oasis.js/packages/service/dist/lib/src/oasis-gateway.d.ts","writeByteOrderMark":false,"text":"import EventEmitter from 'eventemitter3';\r\n/**\r\n * OasisGateway is the client's interface used to access services running on Oasis.\r\n */\r\nexport interface OasisGateway {\r\n    deploy(request: DeployRequest): Promise<DeployResponse>;\r\n    rpc(request: RpcRequest): Promise<RpcResponse>;\r\n    subscribe(request: SubscribeRequest): EventEmitter;\r\n    unsubscribe(request: UnsubscribeRequest): void;\r\n    publicKey(request: PublicKeyRequest): Promise<PublicKeyResponse>;\r\n    getCode(request: GetCodeRequest): Promise<GetCodeResponse>;\r\n    disconnect(): void;\r\n    /**\r\n     * For implementations that manage reconnection internally, this emits advisory\r\n     * events about its internal connection status:\r\n     * - `trouble` when it experiences repeated problems connecting\r\n     * - `ok` when it reconnects after having emitted a `trouble` event\r\n     */\r\n    connectionState(): EventEmitter;\r\n    /**\r\n     * @returns true iff the gateway has a wallet to sign and construct raw\r\n     *          transactions.\r\n     */\r\n    hasSigner(): boolean;\r\n}\r\nexport declare type DeployRequest = {\r\n    data: Uint8Array;\r\n    options?: RpcOptions;\r\n};\r\nexport declare type DeployResponse = {\r\n    address: Uint8Array;\r\n};\r\nexport declare type PublicKeyRequest = {\r\n    address: Uint8Array;\r\n};\r\nexport declare type GetCodeRequest = {\r\n    address: Uint8Array;\r\n};\r\nexport declare type GetCodeResponse = {\r\n    code: Uint8Array | null;\r\n};\r\nexport declare type RpcRequest = {\r\n    data: Uint8Array;\r\n    address?: Uint8Array;\r\n    options?: RpcOptions;\r\n};\r\nexport declare type RpcOptions = {\r\n    gasLimit?: string | number;\r\n    gasPrice?: string | number;\r\n    value?: string | number;\r\n    aad?: string;\r\n};\r\nexport declare type RpcResponse = {\r\n    output: any;\r\n    error?: Uint8Array;\r\n};\r\nexport declare type SubscribeRequest = {\r\n    event: string;\r\n    filter?: SubscribeFilter;\r\n};\r\nexport declare type SubscribeFilter = {\r\n    address: Uint8Array;\r\n    topics: string[];\r\n};\r\nexport declare type UnsubscribeRequest = {\r\n    event: string;\r\n};\r\nexport declare type PublicKeyResponse = {\r\n    publicKey?: Uint8Array;\r\n};\r\nexport declare const SubscribeTopic = \"subscription\";\r\n/**\r\n * setGateway sets the default oasis gateway so that all services use it\r\n * unless explicitly overridden upon construction of the service.\r\n */\r\nexport declare function setGateway(gw: OasisGateway): void;\r\nexport declare function defaultOasisGateway(): OasisGateway;\r\n"}}
