{"map":"{\"version\":3,\"file\":\"idl.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../src/idl.ts\"],\"names\":[],\"mappings\":\";AAAA,OAAO,EAAE,KAAK,EAAE,MAAM,mBAAmB,CAAC;AAC1C,OAAO,EAAE,UAAU,EAAE,MAAM,MAAM,CAAC;AAoBlC;IAA8B,4BAAK;IAAnC;;IAAqC,CAAC;IAAD,eAAC;AAAD,CAAC,AAAtC,CAA8B,KAAK,GAAG;;AAEtC,MAAM,UAAgB,QAAQ,CAAC,QAAoB;;;;;;oBAC1C,KAAA,UAAU,CAAA;oBAAC,qBAAM,WAAW,CAAC,OAAO,CAAC,QAAQ,CAAC,EAAA;wBAArD,sBAAO,kBAAW,SAAmC,EAAC,EAAC;;;;CACxD;AAED,MAAM,UAAU,YAAY,CAAC,QAAoB;IAC/C,OAAO,UAAU,CAAC,IAAI,WAAW,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAC;AACtD,CAAC;AAED,SAAS,UAAU,CAAC,UAA8B;IAChD,aAAa;IACb,IAAI,QAAQ,GAAG,WAAW,CAAC,MAAM,CAAC,cAAc,CAC9C,UAAU,EACV,iBAAiB,CAClB,CAAC;IAEF,IAAI,QAAQ,CAAC,MAAM,KAAK,CAAC,EAAE;QACzB,MAAM,IAAI,QAAQ,CAAC,qDAAqD,CAAC,CAAC;KAC3E;IAED,IAAI,WAAW,GAAG,IAAI,UAAU,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;IAC9C,IAAI,WAAW,GAAG,IAAI,UAAU,CAAC,UAAU,CAAC,WAAW,CAAC,CAAC,CAAC;IAE1D,OAAO,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,UAAU,CAAC,WAAW,CAAC,CAAC,CAAC;AACnD,CAAC;AAUD,IAAK,OAAU;AAAf,WAAK,OAAO;AAAE,CAAC,EAAV,OAAO,KAAP,OAAO,QAAG\"}","code":"import { __awaiter, __extends, __generator } from \"tslib\";\r\nimport { bytes } from '@oasislabs/common';\r\nimport { inflateRaw } from 'pako';\r\nvar IdlError = /** @class */ (function (_super) {\r\n    __extends(IdlError, _super);\r\n    function IdlError() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    return IdlError;\r\n}(Error));\r\nexport { IdlError };\r\nexport function fromWasm(bytecode) {\r\n    return __awaiter(this, void 0, void 0, function () {\r\n        var _a;\r\n        return __generator(this, function (_b) {\r\n            switch (_b.label) {\r\n                case 0:\r\n                    _a = extractIdl;\r\n                    return [4 /*yield*/, WebAssembly.compile(bytecode)];\r\n                case 1: return [2 /*return*/, _a.apply(void 0, [_b.sent()])];\r\n            }\r\n        });\r\n    });\r\n}\r\nexport function fromWasmSync(bytecode) {\r\n    return extractIdl(new WebAssembly.Module(bytecode));\r\n}\r\nfunction extractIdl(wasmModule) {\r\n    // @ts-ignore\r\n    var sections = WebAssembly.Module.customSections(wasmModule, 'oasis-interface');\r\n    if (sections.length !== 1) {\r\n        throw new IdlError('wasm bytecode must have one oasis-interface section');\r\n    }\r\n    var deflatedIdl = new Uint8Array(sections[0]);\r\n    var inflatedIdl = new Uint8Array(inflateRaw(deflatedIdl));\r\n    return JSON.parse(bytes.decodeUtf8(inflatedIdl));\r\n}\r\nvar RpcType;\r\n(function (RpcType) {\r\n})(RpcType || (RpcType = {}));\r\n//# sourceMappingURL=idl.js.map","dts":{"name":"/Users/armaniferrante/Documents/code/src/github.com/oasislabs/tttt/oasis.js/packages/service/dist/lib/src/idl.d.ts","writeByteOrderMark":false,"text":"export interface Idl {\r\n    [key: string]: any;\r\n    constructor: RpcConstructor;\r\n}\r\nexport declare class IdlError extends Error {\r\n}\r\nexport declare function fromWasm(bytecode: Uint8Array): Promise<Idl>;\r\nexport declare function fromWasmSync(bytecode: Uint8Array): Idl;\r\ndeclare type RpcConstructor = any;\r\nexport declare type RpcFn = {\r\n    name: string;\r\n    inputs: Array<RpcInput>;\r\n};\r\nexport declare type RpcInput = any;\r\nexport {};\r\n"}}
