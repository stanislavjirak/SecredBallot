var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
import { EventEmitter } from 'eventemitter3';
import { LocalStorage, bytes } from '@oasislabs/common';
import { fromWasm } from './idl';
import { RpcFactory } from './rpc';
import { DeployHeaderReader } from './deploy/header';
import { defaultOasisGateway, } from './oasis-gateway';
import { ServiceError, NO_CODE_ERROR_MSG } from './error';
/**
 * Service is the object representation of an Oasis rpc service.
 */
var Service = /** @class */ (function () {
    /**
     * The Service constructor to dynamically generate service objects from a
     * given idl.
     *
     * @returns a service with all rpc methods attached to it.
     *
     * @param idl is the Idl definition generated for the Oasis service.
     * @param address? is the address of the currently deployed service.
     * @param options? are the options configuring the Service client.
     */
    function Service(idl, address, options) {
        // Convert to Uint8Array.
        var _address = typeof address === 'string' ? bytes.parseHex(address) : address;
        // Fill in any options not provided by the arguments.
        options = Service.setupOptions(options);
        // Attach the rpcs onto the rpc interface so that we can generate dynamic
        // rpc methods while keeping the compiler happy. Without this, we need
        // to use a types file when using a service within TypeScript.
        var _a = RpcFactory.build(idl, _address, options), rpc = _a[0], coder = _a[1];
        this.rpc = rpc;
        // Attach the rpcs directly onto the Service object so that we can have
        // the nice service.myMethod() syntax in JavaScript.
        Object.assign(this, rpc);
        this._inner = {
            idl: idl,
            options: options,
            coder: coder,
            address: _address,
            listeners: new EventEmitter(),
            subscriptions: new Map(),
        };
    }
    /**
     * Constructs a service object from a given `address` by fetching the on-
     * chain wasm and extracting the idl.
     */
    Service.at = function (address, options) {
        return __awaiter(this, void 0, void 0, function () {
            var _address, response, wasm, idl;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _address = typeof address === 'string' ? bytes.parseHex(address) : address;
                        options = Service.setupOptions(options);
                        return [4 /*yield*/, options.gateway.getCode({ address: _address })];
                    case 1:
                        response = _a.sent();
                        if (!response.code) {
                            throw new ServiceError(_address, NO_CODE_ERROR_MSG(_address));
                        }
                        wasm = DeployHeaderReader.initcode(response.code);
                        return [4 /*yield*/, fromWasm(wasm)];
                    case 2:
                        idl = _a.sent();
                        return [2 /*return*/, new Service(idl, address, options)];
                }
            });
        });
    };
    /**
     * setupOptions configures the options for the Service.
     *
     * @param   options is the options argument given to the constructor.
     * @returns the options to be used for this service, filling in any
     *          options left out by the given options.
     */
    Service.setupOptions = function (options) {
        if (options === undefined) {
            options = defaultOptions();
        }
        else {
            // Remove all undefined fields so that Object.assign overwrites them.
            Object.keys(options).forEach(function (key) {
                if (options[key] === undefined) {
                    delete options[key];
                }
            });
            options = assignDefaultOptions(options);
        }
        return options;
    };
    /**
     * addEventListener is the api to register for observing service events.
     *
     * @param event is the name of the event to listen to.
     * @param callback is the callback to call when an event is emitted in the
     *        case where listener options are provided as the second argument.
     */
    Service.prototype.addEventListener = function (event, callback) {
        var _this = this;
        // Register the listener. We allow many for a single event subscription.
        this._inner.listeners.addListener(event, callback);
        var subscription = this._inner.subscriptions.get(event);
        if (subscription !== undefined) {
            // The subscription is already setup so exit.
            return;
        }
        this._inner.coder
            .then(function (coder) {
            // Create the subscription.
            subscription = _this._inner.options.gateway.subscribe({
                event: event,
                filter: {
                    address: _this._inner.address,
                    topics: [coder.topic(event, _this._inner.idl)],
                },
            });
            // Save the subscription so that we can remove it on demand.
            _this._inner.subscriptions.set(event, subscription);
            // Decode the gateway's response and return it to the listener.
            subscription.addListener(event, function (e) { return __awaiter(_this, void 0, void 0, function () {
                var decoded;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, coder.decodeSubscriptionEvent(e, this._inner.idl)];
                        case 1:
                            decoded = _a.sent();
                            this._inner.listeners.emit(event, decoded);
                            return [2 /*return*/];
                    }
                });
            }); });
        })
            .catch(function (err) {
            console.error("" + err);
        });
    };
    Service.prototype.removeEventListener = function (event, listener) {
        var subscription = this._inner.subscriptions.get(event);
        if (subscription === undefined) {
            throw new ServiceError(this._inner.address, "no subscriptions found for " + event);
        }
        this._inner.listeners.removeListener(event, listener);
        // Remove the subscription if no listeners remain.
        if (this._inner.listeners.listeners(event).length === 0) {
            this._inner.options.gateway.unsubscribe({ event: event });
            this._inner.subscriptions.delete(event);
        }
    };
    return Service;
}());
export default Service;
function assignDefaultOptions(options) {
    if (!options.gateway) {
        options.gateway = defaultOasisGateway();
    }
    if (!options.db) {
        options.db = new LocalStorage();
    }
    return options;
}
function defaultOptions() {
    return {
        gateway: defaultOasisGateway(),
        db: new LocalStorage(),
    };
}
//# sourceMappingURL=service.js.map