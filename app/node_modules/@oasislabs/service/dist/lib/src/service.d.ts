import { Db } from '@oasislabs/common';
import { Idl } from './idl';
import { Rpcs } from './rpc';
import { RpcCoder } from './coder';
import { OasisGateway } from './oasis-gateway';
/**
 * Service is the object representation of an Oasis rpc service.
 */
export default class Service {
    /**
     * The generated rpcs for this service, defined by a given IDL.
     */
    rpc: Rpcs;
    /**
     * The inner variables required to implement the Service object. We reserve
     * the `_inner` namespace so that service methods defined by an IDL don't
     * override/clash with the internal variables. This is required so that we
     * can support the convenient `service.myMethod()` syntax in JavaScript.
     * It's expected no IDL used will have an _inner rpc method.
     */
    private _inner;
    /**
     * The Service constructor to dynamically generate service objects from a
     * given idl.
     *
     * @returns a service with all rpc methods attached to it.
     *
     * @param idl is the Idl definition generated for the Oasis service.
     * @param address? is the address of the currently deployed service.
     * @param options? are the options configuring the Service client.
     */
    constructor(idl: Idl, address: Uint8Array | string, options?: ServiceOptions);
    /**
     * Constructs a service object from a given `address` by fetching the on-
     * chain wasm and extracting the idl.
     */
    static at(address: Uint8Array | string, options?: ServiceOptions): Promise<Service>;
    /**
     * setupOptions configures the options for the Service.
     *
     * @param   options is the options argument given to the constructor.
     * @returns the options to be used for this service, filling in any
     *          options left out by the given options.
     */
    private static setupOptions;
    /**
     * addEventListener is the api to register for observing service events.
     *
     * @param event is the name of the event to listen to.
     * @param callback is the callback to call when an event is emitted in the
     *        case where listener options are provided as the second argument.
     */
    addEventListener(event: string, callback: Listener): void;
    removeEventListener(event: string, listener: Listener): void;
}
/**
 * Listener is a callback method to respond to ServiceEvents.
 */
declare type Listener = (event: ServiceEvent) => void;
/**
 * An event emitted by  a service object.
 */
declare type ServiceEvent = any;
export declare type ServiceOptions = {
    gateway?: OasisGateway;
    db?: Db;
    coder?: RpcCoder;
};
export {};
