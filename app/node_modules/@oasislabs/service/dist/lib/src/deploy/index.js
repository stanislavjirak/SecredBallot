var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
import { bytes } from '@oasislabs/common';
import Service from '../service';
import { fromWasm } from '../idl';
import { defaultOasisGateway, } from '../oasis-gateway';
import { DeployHeader } from './header';
import { OasisCoder } from '../coder/oasis';
import { DeployError } from '../error';
/**
 * deploy creates a service on the Oasis cloud.
 *
 * Expects args to be of the form: [arg1, arg2, ..., argN, options],
 * where argI is a positional constructor argument for the service and
 * the options represents the deploy options.
 *
 * `arg1`, `arg2`, ..., `argnN`: Service specific constructor args.
 * `options`: `_DeployOptions`.
 *
 * // Type just for documentation. Should change in line with the `DeployOptions`.
 * type _DeployOptions = {
 *  bytecode: Uint8Array | string;
 *  idl?: Idl;
 *  header?: DeployHeaderOptions;
 *  gateway?: OasisGateway;
 *  db?: Db;
 *  coder?: RpcCoder;
 *  gasLimit?: string | number;
 *  gasPrice?: string | number;
 *  value?: string | number;
 * };
 *
 * @returns a Service object to make rpc requests with.
 */
export default function deploy() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    return __awaiter(this, void 0, void 0, function () {
        var options, data, gateway, response;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, extractOptions(args)];
                case 1:
                    options = _a.sent();
                    return [4 /*yield*/, deployCode(options)];
                case 2:
                    data = _a.sent();
                    gateway = oasisGateway(options);
                    return [4 /*yield*/, gateway.deploy({ data: data, options: options.options })];
                case 3:
                    response = _a.sent();
                    if (!response.address) {
                        throw new DeployError(args, "Invalid gateway response: " + response);
                    }
                    return [2 /*return*/, new Service(options.idl, response.address, {
                            gateway: gateway,
                            db: options.db,
                            coder: options.coder,
                        })];
            }
        });
    });
}
/**
 * Transforms the given unstructured array of arguments into a
 * DeployOptions type, throwing an error if the arguments are
 * malformed in any way.
 */
function extractOptions(args) {
    return __awaiter(this, void 0, void 0, function () {
        var options, deployOptions;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (args.length === 0) {
                        throw new DeployError(args, 'No deploy arguments provided');
                    }
                    options = (function () {
                        // Options should be the last argument in the args array.
                        var opts = args.pop();
                        // Assert required options are given.
                        if (!opts.bytecode) {
                            throw new DeployError(__spreadArrays(args, [opts]), 'No bytecode provided');
                        }
                        // Convert hex-string convenience api into Uint8Array
                        if (typeof opts.bytecode === 'string') {
                            opts.bytecode = bytes.parseHex(opts.bytecode);
                        }
                        return opts;
                    })();
                    return [4 /*yield*/, toDeployOptions(args, options)];
                case 1:
                    deployOptions = _a.sent();
                    validateDeployOptions(deployOptions, args);
                    return [2 /*return*/, deployOptions];
            }
        });
    });
}
/**
 * Fills in any left out deploy options and converts to the required
 * types if necessary.
 */
function toDeployOptions(args, options) {
    return __awaiter(this, void 0, void 0, function () {
        var idl, _a, rpcOptions;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    _a = options.idl;
                    if (_a) return [3 /*break*/, 2];
                    return [4 /*yield*/, fromWasm(options.bytecode)];
                case 1:
                    _a = (_b.sent());
                    _b.label = 2;
                case 2:
                    idl = _a;
                    rpcOptions = (function () {
                        return {
                            gasLimit: options.gasLimit,
                            gasPrice: options.gasPrice,
                            value: options.value,
                        };
                    })();
                    return [2 /*return*/, {
                            bytecode: options.bytecode,
                            idl: idl,
                            header: deployHeader(options),
                            arguments: args,
                            options: rpcOptions,
                            gateway: options.gateway,
                            db: options.db,
                            coder: options.coder,
                        }];
            }
        });
    });
}
/**
 * @returns the deploy header options from the given DeployOptions,
 *          filling in any left out options with the default header.
 */
function deployHeader(options) {
    var defaultHeader = { confidential: true };
    return Object.assign(defaultHeader, options.header);
}
/**
 * @returns the deployCode from the given options, i.e.,
 *          OASIS_HEADER || INITCODE.
 */
function deployCode(options) {
    return __awaiter(this, void 0, void 0, function () {
        var code, header;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, initcode(options)];
                case 1:
                    code = _a.sent();
                    header = deployHeader(options);
                    return [2 /*return*/, DeployHeader.deployCode(header, code)];
            }
        });
    });
}
/**
 * @returns the initcode, i.e., BYTECODE || ABI_ENCODED(args).
 */
function initcode(options) {
    return __awaiter(this, void 0, void 0, function () {
        var encoder;
        return __generator(this, function (_a) {
            encoder = options.coder ? options.coder : OasisCoder.plaintext();
            return [2 /*return*/, encoder.initcode(options.idl, options.arguments || [], options.bytecode)];
        });
    });
}
/**
 * @returns the gateway to use for deploying the Service.
 */
function oasisGateway(options) {
    return options.gateway || defaultOasisGateway();
}
/**
 * @throws if the given deployOptions are malformed.
 */
function validateDeployOptions(deployOptions, args) {
    if (deployOptions.header.confidential &&
        (!deployOptions.options || !deployOptions.options.gasLimit)) {
        throw new DeployError(args, 'gasLimit must be provided for confidential deploys');
    }
}
//# sourceMappingURL=index.js.map