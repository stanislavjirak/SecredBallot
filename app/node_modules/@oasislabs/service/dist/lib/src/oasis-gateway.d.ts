import EventEmitter from 'eventemitter3';
/**
 * OasisGateway is the client's interface used to access services running on Oasis.
 */
export interface OasisGateway {
    deploy(request: DeployRequest): Promise<DeployResponse>;
    rpc(request: RpcRequest): Promise<RpcResponse>;
    subscribe(request: SubscribeRequest): EventEmitter;
    unsubscribe(request: UnsubscribeRequest): void;
    publicKey(request: PublicKeyRequest): Promise<PublicKeyResponse>;
    getCode(request: GetCodeRequest): Promise<GetCodeResponse>;
    disconnect(): void;
    /**
     * For implementations that manage reconnection internally, this emits advisory
     * events about its internal connection status:
     * - `trouble` when it experiences repeated problems connecting
     * - `ok` when it reconnects after having emitted a `trouble` event
     */
    connectionState(): EventEmitter;
    /**
     * @returns true iff the gateway has a wallet to sign and construct raw
     *          transactions.
     */
    hasSigner(): boolean;
}
export declare type DeployRequest = {
    data: Uint8Array;
    options?: RpcOptions;
};
export declare type DeployResponse = {
    address: Uint8Array;
};
export declare type PublicKeyRequest = {
    address: Uint8Array;
};
export declare type GetCodeRequest = {
    address: Uint8Array;
};
export declare type GetCodeResponse = {
    code: Uint8Array | null;
};
export declare type RpcRequest = {
    data: Uint8Array;
    address?: Uint8Array;
    options?: RpcOptions;
};
export declare type RpcOptions = {
    gasLimit?: string | number;
    gasPrice?: string | number;
    value?: string | number;
    aad?: string;
};
export declare type RpcResponse = {
    output: any;
    error?: Uint8Array;
};
export declare type SubscribeRequest = {
    event: string;
    filter?: SubscribeFilter;
};
export declare type SubscribeFilter = {
    address: Uint8Array;
    topics: string[];
};
export declare type UnsubscribeRequest = {
    event: string;
};
export declare type PublicKeyResponse = {
    publicKey?: Uint8Array;
};
export declare const SubscribeTopic = "subscription";
/**
 * setGateway sets the default oasis gateway so that all services use it
 * unless explicitly overridden upon construction of the service.
 */
export declare function setGateway(gw: OasisGateway): void;
export declare function defaultOasisGateway(): OasisGateway;
