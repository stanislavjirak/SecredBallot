import { AeadKeys } from '@oasislabs/confidential';
import { Idl, RpcFn } from '../idl';
import { RpcCoder, RpcEncoder, RpcDecoder } from './';
import { RpcOptions } from '../oasis-gateway';
/**
 * RpcCoder encodes and decodes service rpc requests. Use the static factory methods to
 * construct an instance.
 */
export declare class OasisCoder implements RpcCoder {
    private encoder;
    private decoder;
    constructor(encoder: RpcEncoder, decoder: RpcDecoder);
    encode(fn: RpcFn, args: any[], options?: RpcOptions): Promise<Uint8Array>;
    decode(fn: RpcFn, data: Uint8Array, constructor?: boolean): Promise<any>;
    decodeError(error: Uint8Array): Promise<string>;
    functions(idl: Idl): RpcFn[];
    topic(event: string, idl: Idl): string;
    decodeSubscriptionEvent(e: any, idl: Idl): Promise<any>;
    initcode(idl: Idl, params: any[], bytecode: Uint8Array): Promise<Uint8Array>;
    /**
     * Factory method returning a confidential RpcCoder.
     */
    static confidential(keys: AeadKeys): RpcCoder;
    /**
     * Factory method returning a non-confidential RpcCoder.
     */
    static plaintext(): RpcCoder;
}
export declare class PlaintextRpcEncoder implements RpcEncoder {
    encode(fn: RpcFn, args: any[]): Promise<Uint8Array>;
}
export declare class PlaintextRpcDecoder {
    decode(fn: RpcFn, data: Uint8Array, constructor?: boolean): Promise<any>;
    decodeError(error: Uint8Array): Promise<string>;
}
