import { AeadKeys } from '@oasislabs/confidential';
import { Idl, RpcFn } from '../idl';
import { RpcCoder } from './';
import { RpcOptions } from '../oasis-gateway';
/**
 * Wraps a coder to encrypt/decrypt encoded messages in addition to coding.
 */
export default class ConfidentialCoder {
    private keys;
    private internalCoder;
    constructor(keys: AeadKeys, internalCoder: RpcCoder);
    encode(fn: RpcFn, args: any[], options?: RpcOptions): Promise<Uint8Array>;
    decode(fn: RpcFn, encrypted: Uint8Array, constructor?: boolean): Promise<any>;
    decodeError(error: Uint8Array): Promise<string>;
    initcode(abi: Idl, params: any[], bytecode: Uint8Array): Promise<Uint8Array>;
    functions(idl: Idl): RpcFn[];
    topic(event: string, idl: Idl): string;
    decodeSubscriptionEvent(log: any, abi: Idl): Promise<any>;
}
