import { Idl } from './idl';
import { ServiceOptions } from './service';
import { RpcCoder } from './coder';
/**
 * Rpcs is a dynamically generated object with rpc methods attached.
 */
export interface Rpcs {
    [key: string]: Rpc;
}
/**
 * Rpc is a single rpc method.
 */
export declare type Rpc = (...args: any[]) => Promise<any>;
/**
 * RpcFactory builds an Rpcs object for a given idl.
 */
export declare class RpcFactory {
    /**
     * build dynamically generates RPC methods.
     *
     * @returns an object with all the RPC methods attached.
     */
    static build(idl: Idl, address: Uint8Array, options: ServiceOptions): [Rpcs, Promise<RpcCoder>];
    private static buildRpc;
    /**
     * Transforms the given `idlName` into a properly formatted
     * snakeCase rpc name to be exposed on the service client.
     */
    private static rpcName;
    private static parseOptions;
    private static splitArgsAndOptions;
    /**
     * Asserts the given `rpcOptions` are well formed.
     * When signing transactions in the client, confidential services
     * must have the gasLimit specified by the user, since estimateGas
     * is not available. When signing is done by a remote gateway, e.g.,
     * the developer-gateway, this requirement is not enforced.
     */
    private static validateRpcOptions;
    /**
     * discover finds out if the contract at `address` is confidential.
     *
     * @returns the OasisCoder to use based upon whether it's confidential.
     */
    private static discover;
}
