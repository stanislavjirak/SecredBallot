var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
import camelCase from 'camelcase';
import { KeyStore } from '@oasislabs/confidential';
import { bytes } from '@oasislabs/common';
import { RpcError, ServiceError, NO_CODE_ERROR_MSG } from './error';
import { IdlError } from './idl';
import ConfidentialCoder from './coder/confidential';
import { OasisCoder } from './coder/oasis';
import { header } from './deploy/header';
/**
 * RpcFactory builds an Rpcs object for a given idl.
 */
var RpcFactory = /** @class */ (function () {
    function RpcFactory() {
    }
    /**
     * build dynamically generates RPC methods.
     *
     * @returns an object with all the RPC methods attached.
     */
    RpcFactory.build = function (idl, address, options) {
        var functions = options.coder
            ? options.coder.functions(idl)
            : OasisCoder.plaintext().functions(idl);
        var rpcCoder = new Promise(function (resolve) {
            options.coder
                ? resolve(options.coder)
                : RpcFactory.discover(address, options).then(resolve);
        });
        var rpcs = {};
        functions.forEach(function (fn) {
            var rpcDef = RpcFactory.buildRpc(fn, address, options.gateway, rpcCoder);
            rpcs[rpcDef.name] = rpcDef.rpc;
        });
        return [rpcs, rpcCoder];
    };
    RpcFactory.buildRpc = function (fn, address, gateway, rpcCoder) {
        var _this = this;
        if (fn.name === '_inner') {
            throw new IdlError('the _inner name is reserved by the oasis-client');
        }
        var name = RpcFactory.rpcName(fn.name);
        var rpc = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            return __awaiter(_this, void 0, void 0, function () {
                var coder, _a, rpcArgs, rpcOptions, txData, response, errorStr;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0: return [4 /*yield*/, rpcCoder];
                        case 1:
                            coder = _b.sent();
                            _a = RpcFactory.parseOptions(fn, args, gateway, coder), rpcArgs = _a[0], rpcOptions = _a[1];
                            return [4 /*yield*/, coder.encode(fn, rpcArgs, rpcOptions)];
                        case 2:
                            txData = _b.sent();
                            return [4 /*yield*/, gateway.rpc({
                                    data: txData,
                                    address: address,
                                    options: rpcOptions,
                                })];
                        case 3:
                            response = _b.sent();
                            if (!response.error) return [3 /*break*/, 5];
                            return [4 /*yield*/, coder.decodeError(response.error)];
                        case 4:
                            errorStr = _b.sent();
                            throw new Error(errorStr);
                        case 5: return [2 /*return*/, coder.decode(fn, bytes.parseHex(response.output))];
                    }
                });
            });
        };
        return {
            rpc: rpc,
            name: name,
        };
    };
    /**
     * Transforms the given `idlName` into a properly formatted
     * snakeCase rpc name to be exposed on the service client.
     */
    RpcFactory.rpcName = function (idlName) {
        return camelCase(idlName);
    };
    RpcFactory.parseOptions = function (fn, args, gateway, rpcCoder) {
        var _a = RpcFactory.splitArgsAndOptions(fn, args), rpcArgs = _a[0], rpcOptions = _a[1];
        RpcFactory.validateRpcOptions(gateway, rpcCoder, rpcArgs, rpcOptions);
        return [rpcArgs, rpcOptions];
    };
    RpcFactory.splitArgsAndOptions = function (fn, args) {
        var options = undefined;
        var inputLen = fn.inputs ? fn.inputs.length : 0;
        if (args.length > inputLen) {
            if (args.length !== inputLen + 1) {
                throw new Error('provided too many arguments ${args}');
            }
            var arg = args.pop();
            options = arg ? JSON.parse(JSON.stringify(arg)) : undefined;
        }
        return [args, options];
    };
    /**
     * Asserts the given `rpcOptions` are well formed.
     * When signing transactions in the client, confidential services
     * must have the gasLimit specified by the user, since estimateGas
     * is not available. When signing is done by a remote gateway, e.g.,
     * the developer-gateway, this requirement is not enforced.
     */
    RpcFactory.validateRpcOptions = function (gateway, rpcCoder, rpcArgs, rpcOptions) {
        if (gateway.hasSigner()) {
            if (rpcCoder instanceof ConfidentialCoder) {
                if (!rpcOptions || !rpcOptions.gasLimit) {
                    throw new RpcError(rpcArgs, rpcOptions, "gasLimit must be specified when signing a transaction to a confidential service");
                }
            }
        }
    };
    /**
     * discover finds out if the contract at `address` is confidential.
     *
     * @returns the OasisCoder to use based upon whether it's confidential.
     */
    RpcFactory.discover = function (address, options) {
        return __awaiter(this, void 0, void 0, function () {
            var response, deployHeader, keyStore, serviceKey, myKeyPair;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, options.gateway.getCode({ address: address })];
                    case 1:
                        response = _a.sent();
                        if (!response.code) {
                            throw new ServiceError(address, NO_CODE_ERROR_MSG(address));
                        }
                        deployHeader = header.parseFromCode(response.code);
                        if (!deployHeader || !deployHeader.body.confidential) {
                            return [2 /*return*/, OasisCoder.plaintext()];
                        }
                        keyStore = new KeyStore(options.db, options.gateway);
                        return [4 /*yield*/, keyStore.publicKey(address)];
                    case 2:
                        serviceKey = _a.sent();
                        myKeyPair = keyStore.localKeys();
                        return [2 /*return*/, OasisCoder.confidential({
                                peerPublicKey: serviceKey,
                                publicKey: myKeyPair.publicKey,
                                privateKey: myKeyPair.privateKey,
                            })];
                }
            });
        });
    };
    return RpcFactory;
}());
export { RpcFactory };
//# sourceMappingURL=rpc.js.map