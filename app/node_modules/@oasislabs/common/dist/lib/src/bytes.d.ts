/**
 * Return a Uint8Array of an ethereum hex-encoded key (EthHex)
 * @param   keystring is the EthHex encoding of the value
 * @param   littleEndian is true if the keystring should be interpreted as
 *          little endian. Otherwise, defaults to big endian.
 * @returns the byte incoding of the value
 */
export declare function parseHex(keystring: string, littleEndian?: boolean): Uint8Array;
/**
 * Returns an ethereum hex-encoded key of a Uint8Array
 * @param {Uint8Array} keybytes
 * @returns {String} The EthHex encoding
 */
export declare function toHex(keybytes: Uint8Array): string;
/**
 * @returns a Uint8Array representation of number with numBytes.
 * @param   num is the number of which we want a byte representation.
 * @param   numBytes is the number of bytes to have in the resultant array.
 * @param   littleEndian is true iff the resultant byte array is little Endian.
 * @throws  if the resultant array will be longer than numBytes or the given
 *          `num` is less than 0.
 */
export declare function parseNumber(num: number, numBytes: number, littleEndian?: boolean): Uint8Array;
/**
 * @returns a newly allocated Uint8Array of all arrays concatenated together.
 */
export declare function concat(arrays: Array<Uint8Array>): Uint8Array;
/**
 * decodeUtf8 is a string decoding utility for both node and browsers.
 */
export declare function decodeUtf8(array: Uint8Array): string;
/**
 * encodeUtf8 is a string encoding utility for both node and browsers.
 */
export declare function encodeUtf8(input: string): Uint8Array;
/**
 * Converts the given byte array to a number. Cannot parse a number
 * larger than u64, specifically, 2**53-1 (javascripts max number).
 */
export declare function toNumber(bytes: Uint8Array, le?: boolean): number;
/**
 * @returns the given bytes as a Uint8Array.
 * @throws  if the given bytes is not of the given `length`.
 */
export declare function assertLength(bytes: string | Uint8Array, length: number): Uint8Array;
export declare class InvalidBytesError extends Error {
    readonly bytes: Uint8Array;
    constructor(bytes: Uint8Array, ...params: any[]);
}
