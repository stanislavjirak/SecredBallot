/**
 * Cbor utility module to
 * 1) provide a clean import (import * as cbor from './cbor';) and
 * 2) provide a consistent Uint8Array interface, since cbor-js uses ArrayBuffers.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import * as _cborJs from 'cbor-js';
var cborJs = undefined;
// Browser.
/* tslint:disable */
if (typeof window !== 'undefined') {
    cborJs = _cborJs.default;
}
// Node;
else {
    cborJs = require('cbor-js');
}
export function encode(input) {
    return new Uint8Array(cborJs.encode(input));
}
export function decode(input) {
    try {
        return cborJs.decode(input.buffer);
    }
    catch (e) {
        throw new CborDecodeError(input, "Failed to cbor decode " + input + " with error: " + e.message);
    }
}
var cbor = {
    encode: encode,
    decode: decode,
};
var CborDecodeError = /** @class */ (function (_super) {
    __extends(CborDecodeError, _super);
    function CborDecodeError(data) {
        var params = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            params[_i - 1] = arguments[_i];
        }
        var _this = _super.apply(this, params) || this;
        _this.data = data;
        return _this;
    }
    return CborDecodeError;
}(Error));
export { CborDecodeError };
export default cbor;
//# sourceMappingURL=cbor.js.map