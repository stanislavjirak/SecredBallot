{"map":"{\"version\":3,\"file\":\"cbor.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../src/cbor.ts\"],\"names\":[],\"mappings\":\"AAAA;;;;GAIG;;AAEH,OAAO,KAAK,OAAO,MAAM,SAAS,CAAC;AAEnC,IAAI,MAAM,GAAQ,SAAS,CAAC;AAE5B,WAAW;AACX,oBAAoB;AACpB,IAAI,OAAO,MAAM,KAAK,WAAW,EAAE;IACjC,MAAM,GAAG,OAAO,CAAC,OAAO,CAAC;CAC1B;AACD,QAAQ;KACH;IACH,MAAM,GAAG,OAAO,CAAC,SAAS,CAAC,CAAC;CAC7B;AAED,MAAM,UAAU,MAAM,CAAC,KAAU;IAC/B,OAAO,IAAI,UAAU,CAAC,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC;AAC9C,CAAC;AAED,MAAM,UAAU,MAAM,CAAC,KAAiB;IACtC,IAAI;QACF,OAAO,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;KACpC;IAAC,OAAO,CAAC,EAAE;QACV,MAAM,IAAI,eAAe,CACvB,KAAK,EACL,2BAAyB,KAAK,qBAAgB,CAAC,CAAC,OAAS,CAC1D,CAAC;KACH;AACH,CAAC;AAED,IAAM,IAAI,GAAG;IACX,MAAM,QAAA;IACN,MAAM,QAAA;CACP,CAAC;AAEF;IAAqC,mCAAK;IACxC,yBAAoB,IAAgB;QAAE,gBAAgB;aAAhB,UAAgB,EAAhB,qBAAgB,EAAhB,IAAgB;YAAhB,+BAAgB;;QAAtD,+BACW,MAAM,UAChB;QAFmB,UAAI,GAAJ,IAAI,CAAY;;IAEpC,CAAC;IACH,sBAAC;AAAD,CAAC,AAJD,CAAqC,KAAK,GAIzC;;AAED,eAAe,IAAI,CAAC\"}","code":"/**\r\n * Cbor utility module to\r\n * 1) provide a clean import (import * as cbor from './cbor';) and\r\n * 2) provide a consistent Uint8Array interface, since cbor-js uses ArrayBuffers.\r\n */\r\nimport { __extends } from \"tslib\";\r\nimport * as _cborJs from 'cbor-js';\r\nvar cborJs = undefined;\r\n// Browser.\r\n/* tslint:disable */\r\nif (typeof window !== 'undefined') {\r\n    cborJs = _cborJs.default;\r\n}\r\n// Node;\r\nelse {\r\n    cborJs = require('cbor-js');\r\n}\r\nexport function encode(input) {\r\n    return new Uint8Array(cborJs.encode(input));\r\n}\r\nexport function decode(input) {\r\n    try {\r\n        return cborJs.decode(input.buffer);\r\n    }\r\n    catch (e) {\r\n        throw new CborDecodeError(input, \"Failed to cbor decode \" + input + \" with error: \" + e.message);\r\n    }\r\n}\r\nvar cbor = {\r\n    encode: encode,\r\n    decode: decode,\r\n};\r\nvar CborDecodeError = /** @class */ (function (_super) {\r\n    __extends(CborDecodeError, _super);\r\n    function CborDecodeError(data) {\r\n        var params = [];\r\n        for (var _i = 1; _i < arguments.length; _i++) {\r\n            params[_i - 1] = arguments[_i];\r\n        }\r\n        var _this = _super.apply(this, params) || this;\r\n        _this.data = data;\r\n        return _this;\r\n    }\r\n    return CborDecodeError;\r\n}(Error));\r\nexport { CborDecodeError };\r\nexport default cbor;\r\n//# sourceMappingURL=cbor.js.map","dts":{"name":"/Users/armaniferrante/Documents/code/src/github.com/oasislabs/qwer/oasis.js/packages/common/dist/lib/src/cbor.d.ts","writeByteOrderMark":false,"text":"/**\r\n * Cbor utility module to\r\n * 1) provide a clean import (import * as cbor from './cbor';) and\r\n * 2) provide a consistent Uint8Array interface, since cbor-js uses ArrayBuffers.\r\n */\r\nexport declare function encode(input: any): Uint8Array;\r\nexport declare function decode(input: Uint8Array): any;\r\ndeclare const cbor: {\r\n    encode: typeof encode;\r\n    decode: typeof decode;\r\n};\r\nexport declare class CborDecodeError extends Error {\r\n    private data;\r\n    constructor(data: Uint8Array, ...params: any[]);\r\n}\r\nexport default cbor;\r\n"}}
