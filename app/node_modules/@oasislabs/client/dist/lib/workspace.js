var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
import { Web3Gateway } from '@oasislabs/web3';
import Gateway from '@oasislabs/gateway';
import { deploy, fromWasmSync, setGateway, defaultOasisGateway, } from '@oasislabs/service';
import Wallet from './wallet';
var WorkspaceError = /** @class */ (function (_super) {
    __extends(WorkspaceError, _super);
    function WorkspaceError() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return WorkspaceError;
}(Error));
var _populatedWorkspace = false;
export default new Proxy({
    gateway: configGateway,
}, {
    get: function (workspaceCache, serviceName) {
        var find = require('find');
        var fs = require('fs');
        var process = require('process');
        // tslint:disable-next-line strict-type-predicates
        if (typeof window !== 'undefined') {
            throw new Error('`oasis.workspace` is not (yet) available in the browser');
        }
        if (!_populatedWorkspace) {
            var projectRoot = process.env.OASIS_WORKSPACE;
            if (projectRoot === undefined) {
                var path = require('path');
                projectRoot = process.cwd();
                while (!fs.existsSync(path.join(projectRoot, '.git'))) {
                    var parentDir = path.dirname(projectRoot);
                    if (parentDir === projectRoot) {
                        projectRoot = undefined;
                    }
                    projectRoot = parentDir;
                }
            }
            if (projectRoot === undefined) {
                throw new Error('Could not find workspace root. Perhaps set the `OASIS_WORKSPACE` env var?');
            }
            find
                .fileSync(/target\/service\/.*\.wasm/, projectRoot)
                .reduce(function (services, wasmPath) {
                var bytecode = fs.readFileSync(wasmPath);
                var idl = fromWasmSync(bytecode);
                services[idl.name] = new ServiceDefinition(bytecode, idl);
                return services;
            }, workspaceCache);
            _populatedWorkspace = true;
        }
        return workspaceCache[serviceName];
    },
});
var ServiceDefinition = /** @class */ (function () {
    function ServiceDefinition(bytecode, idl) {
        this.bytecode = bytecode;
        this.idl = idl;
    }
    ServiceDefinition.prototype.deploy = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        return __awaiter(this, void 0, void 0, function () {
            var e_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 1, , 3]);
                        defaultOasisGateway();
                        return [3 /*break*/, 3];
                    case 1:
                        e_1 = _a.sent();
                        return [4 /*yield*/, configGateway()];
                    case 2:
                        _a.sent();
                        return [3 /*break*/, 3];
                    case 3:
                        // Place the bytecode into the DeployOptions.
                        this.injectBytecode(args);
                        // Finally, perform the deploy.
                        return [2 /*return*/, deploy.apply(void 0, args)];
                }
            });
        });
    };
    /**
     * Inject the bytecode into the deploy options.
     * Deploy options were either provided or not.
     */
    ServiceDefinition.prototype.injectBytecode = function (args) {
        // Deploy options provided, so inject the bytecode into them.
        if (this.idl.constructor.inputs.length + 1 === args.length) {
            // Replace the args' options with a cloned version.
            var options = (function () {
                var o = args.pop();
                if (typeof o !== 'object') {
                    throw new WorkspaceError('Options argument must be an object');
                }
                if (o.bytecode) {
                    throw new WorkspaceError('Bytecode should not be provided when deploying a workspace service');
                }
                o = JSON.parse(JSON.stringify(o));
                args.push(o);
                return o;
            })();
            // Inject the bytecode into the options.
            options.bytecode = this.bytecode;
        }
        // Deploy options not provided, so create them and then add them
        // to the arguments.
        else if (this.idl.constructor.inputs.length === args.length) {
            var options = {
                bytecode: this.bytecode,
            };
            args.push(options);
        }
    };
    return ServiceDefinition;
}());
export { ServiceDefinition };
function configGateway() {
    return __awaiter(this, void 0, void 0, function () {
        var config;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    // tslint:disable-next-line strict-type-predicates
                    if (typeof window !== 'undefined') {
                        throw new WorkspaceError('Cannot use oasis.workspace in the browser');
                    }
                    return [4 /*yield*/, Config.read()];
                case 1:
                    config = _a.sent();
                    setGateway(config.gateway());
                    return [2 /*return*/, defaultOasisGateway()];
            }
        });
    });
}
var Config = /** @class */ (function () {
    function Config(inner) {
        this.inner = inner;
    }
    Config.read = function () {
        return __awaiter(this, void 0, void 0, function () {
            var path, configPath, config, _a, _b, profile, gatewayConfig;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        path = require('path');
                        configPath = process.env.OASIS_CONFIG_FILE ||
                            path.join(process.env.XDG_CONFIG_HOME || path.join(process.env.HOME, '.config'), 'oasis', 'config.toml');
                        _b = (_a = require('toml')).parse;
                        return [4 /*yield*/, require('util').promisify(require('fs').readFile)(configPath)];
                    case 1:
                        config = _b.apply(_a, [_c.sent()]);
                        if (!('profile' in config)) {
                            throw new Error("No profile in " + configPath);
                        }
                        profile = process.env.OASIS_PROFILE || 'default';
                        if (!(profile in config.profile)) {
                            throw new Error("No profile named `" + profile + "` in " + configPath);
                        }
                        gatewayConfig = config.profile[profile];
                        return [2 /*return*/, new Config(gatewayConfig)];
                }
            });
        });
    };
    Config.prototype.gateway = function () {
        var gatewayUrl;
        var gatewayType;
        var credential = new Credential(this.inner.credential);
        if (typeof this.inner.gateway === 'object') {
            gatewayUrl = this.inner.gateway.url;
            gatewayType = getGatewayType(this.inner.gateway.type);
        }
        else {
            gatewayUrl = this.inner.gateway;
        }
        if (!gatewayType) {
            gatewayType = inferGatewayType(gatewayUrl, credential);
        }
        if (gatewayType === GatewayType.Web3) {
            return new Web3Gateway(gatewayUrl, credential.wallet);
        }
        return new Gateway(gatewayUrl, credential.credential, {
            headers: new Map(),
        });
    };
    return Config;
}());
function getGatewayType(gateway) {
    if (gateway === 'web3') {
        return GatewayType.Web3;
    }
    else if (gateway === 'oasis') {
        return GatewayType.Oasis;
    }
    throw new Error("Invalid gateway type: `" + gateway + "`." + '' + " Available options are `web3` and `oasis`");
}
function inferGatewayType(gatewayUrl, credential) {
    var url = require('url').parse(gatewayUrl.toLowerCase());
    var port = parseInt(url.port, 10);
    if (url.hostname.match(/web3/gi) ||
        port in [8545, 8546] ||
        credential.type === CredentialType.Mnemonic ||
        credential.type === CredentialType.PrivateKey) {
        return GatewayType.Web3;
    }
    return GatewayType.Oasis;
}
var GatewayType;
(function (GatewayType) {
    GatewayType[GatewayType["Web3"] = 0] = "Web3";
    GatewayType[GatewayType["Oasis"] = 1] = "Oasis";
})(GatewayType || (GatewayType = {}));
var Credential = /** @class */ (function () {
    function Credential(credential) {
        this.credential = credential;
        var API_TOKEN_NUM_BYTES = 32 + 32 / 8;
        var PRIVATE_KEY_NUM_BYTES = 32;
        var MNEMONIC_NUM_WORDS = 12;
        if (Buffer.from(credential, 'base64').length === API_TOKEN_NUM_BYTES) {
            this.type = CredentialType.ApiToken;
        }
        else if (Buffer.from(credential, 'hex').length === PRIVATE_KEY_NUM_BYTES) {
            this.type = CredentialType.PrivateKey;
            this.wallet = new Wallet(credential);
        }
        else if (credential.split(' ').length === MNEMONIC_NUM_WORDS) {
            this.type = CredentialType.Mnemonic;
            this.wallet = Wallet.fromMnemonic(credential);
        }
        else {
            throw new Error("Invalid credential: `" + credential + "`.");
        }
    }
    return Credential;
}());
var CredentialType;
(function (CredentialType) {
    CredentialType[CredentialType["PrivateKey"] = 0] = "PrivateKey";
    CredentialType[CredentialType["Mnemonic"] = 1] = "Mnemonic";
    CredentialType[CredentialType["ApiToken"] = 2] = "ApiToken";
})(CredentialType || (CredentialType = {}));
//# sourceMappingURL=workspace.js.map