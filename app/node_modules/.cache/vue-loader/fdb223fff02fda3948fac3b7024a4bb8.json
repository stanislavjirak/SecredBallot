{"remainingRequest":"/home/sj/Documents/ballot/app/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/sj/Documents/ballot/app/src/views/Vote.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/sj/Documents/ballot/app/src/views/Vote.vue","mtime":1569774146130},{"path":"/home/sj/Documents/ballot/app/node_modules/vuetify-loader/lib/loader.js","mtime":1564062719000},{"path":"/home/sj/Documents/ballot/app/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/sj/Documents/ballot/app/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { mapActions } from \"vuex\";\n\nexport default {\n  name: \"Vote\",\n  async created() {\n    if (!this.$route.query.id) {\n      return;\n    }\n    await this.loadService(this.$route.query.id);\n\n    // Check if the vote is closed, and and redirect to results page if it is\n    const open = await this.getOpen();\n    if (!open) {\n      this.$router.push({ name: \"results\", query: this.$route.query });\n      return;\n    }\n\n    this.question = await this.getDescription();\n    this.options = await this.getCandidates();\n    this.loading=false;\n  },\n  data() {\n    return {\n      loading: true,\n      options: [],\n      question: \"\",\n      radios: [],\n        options: [],\n    };\n  },\n  methods: {\n    ...mapActions([\n      \"loadService\",\n      \"castVote\",\n      \"getDescription\",\n      \"getCandidates\",\n      \"getOpen\"\n    ]),\n    async submit() {\n      this.loading = true;\n      const options = this.options.map((item) => parseInt(item));\n      const three = options.findIndex((item) => item === 3);\n      const two = options.findIndex((item) => item === 2);\n      const minusOne = options.findIndex((item) => item === 0);\n\n      const isDefined = (num) => {\n          return typeof num === 'number' && !Number.isNaN(num);\n      };\n\n      const toSend = [\n        isDefined(three) ? three : -1,\n        isDefined(two) ? two : -1,\n        isDefined(minusOne) ? minusOne : -1\n      ];\n      await this.castVote(toSend);\n      console.log(this.radios);\n\n      this.loading = false;\n      this.$router.push({ name: \"confirm\", query: this.$route.query });\n    }\n  }\n};\n",{"version":3,"sources":["Vote.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuDA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA","file":"Vote.vue","sourceRoot":"src/views","sourcesContent":["<template>\n  <v-container id=\"Vote_Container\">\n    <v-card :loading=\"loading\">\n      <v-list-item three-line>\n        <v-list-item-content class=\"align-self-start\" >\n          <v-list-item-title class=\"headline mb-2\">{{ question }}</v-list-item-title>\n          <v-list-item-subtitle>Help us decide</v-list-item-subtitle>\n        </v-list-item-content>\n\n        <v-list-item-avatar size=\"125\">\n          <v-img src=\"/assets/prague.jpg\"></v-img>\n        </v-list-item-avatar>\n      </v-list-item>\n    </v-card>\n\n    <v-list-item-group v-model=\"radios\" multiple>\n        <v-row v-for=\"(option, index) of options\" :key='options[index]'>\n          <v-col cols=\"12\">\n            <p>{{ option }}</p>\n            <v-btn-toggle v-model=\"options[index]\">\n              <v-btn text value=\"0\">\n                <span class=\"hidden-sm-and-down\">Downvote</span>\n                <v-icon>thumb_down</v-icon>\n              </v-btn>\n              <v-btn text value=\"1\" disabled>\n                <span class=\"hidden-sm-and-down\">No vote</span>\n              </v-btn>\n              <v-btn text value=\"2\">\n                <span class=\"hidden-sm-and-down\">+1 Vote</span>\n                <v-icon>thumb_up</v-icon>\n              </v-btn>\n              <v-btn text value=\"3\">\n                <span class=\"hidden-sm-and-down\">+2 Vote</span>\n                <v-icon color=\"green\">thumb_up</v-icon>\n              </v-btn>\n            </v-btn-toggle>\n          </v-col>\n        </v-row>\n    </v-list-item-group>\n\n\n    <div class=\"text-xs-center\" v-if=\"loading == true\">\n      <v-btn id=\"Vote_SelectedButton\" @click=\"submit\">Submit your vote</v-btn>\n    </div>\n    <div id=\"Vote_Warning\" class=\"pt-3\" v-if=\"radios !== null\">\n      <img id=\"Vote_WarningIcon\" src=\"/assets/SecretBallot_warn.svg\" />\n      <span class=\"pl-1\">\n        Once you submit, you won't be able to change your answer\n        or vote again as a different identity.\n      </span>\n    </div>\n  </v-container>\n</template>\n\n<script>\nimport { mapActions } from \"vuex\";\n\nexport default {\n  name: \"Vote\",\n  async created() {\n    if (!this.$route.query.id) {\n      return;\n    }\n    await this.loadService(this.$route.query.id);\n\n    // Check if the vote is closed, and and redirect to results page if it is\n    const open = await this.getOpen();\n    if (!open) {\n      this.$router.push({ name: \"results\", query: this.$route.query });\n      return;\n    }\n\n    this.question = await this.getDescription();\n    this.options = await this.getCandidates();\n    this.loading=false;\n  },\n  data() {\n    return {\n      loading: true,\n      options: [],\n      question: \"\",\n      radios: [],\n        options: [],\n    };\n  },\n  methods: {\n    ...mapActions([\n      \"loadService\",\n      \"castVote\",\n      \"getDescription\",\n      \"getCandidates\",\n      \"getOpen\"\n    ]),\n    async submit() {\n      this.loading = true;\n      const options = this.options.map((item) => parseInt(item));\n      const three = options.findIndex((item) => item === 3);\n      const two = options.findIndex((item) => item === 2);\n      const minusOne = options.findIndex((item) => item === 0);\n\n      const isDefined = (num) => {\n          return typeof num === 'number' && !Number.isNaN(num);\n      };\n\n      const toSend = [\n        isDefined(three) ? three : -1,\n        isDefined(two) ? two : -1,\n        isDefined(minusOne) ? minusOne : -1\n      ];\n      await this.castVote(toSend);\n      console.log(this.radios);\n\n      this.loading = false;\n      this.$router.push({ name: \"confirm\", query: this.$route.query });\n    }\n  }\n};\n</script>\n\n"]}]}